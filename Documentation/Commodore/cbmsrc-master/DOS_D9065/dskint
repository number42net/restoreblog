.PAGE 'DSKINT'
;
; ERROR DISPLAY ROUTINE
; BLINKS THE (ERROR #)+1 IN ALL THREE LEDS
;
PEZRO
	LDX #0          ; ERROR#1 FOR ZERO PAGE
	.BYTE $2C       ; SKIP NEXT TWO BYTES
PERR
	LDX TEMP        ; GET THE ERROR#
	TXS             ; USE STACK AS STORAGE REG.
PE20
	TSX             ; RESTORE ERROR#
PE30
	LDA #ERRLED+LED0+LED1
	STA PBD2        ; TURN ON ALL THREE LEDS
	TYA
PD10
	CLC
PD20
	ADC #1
	BNE PD20
	DEY             ; DONE?
	BNE PD10        ; NO
	STY PBD2        ; TURN OFF ALL LEDS
PE40
	TYA
PD11
	CLC
PD21
	ADC #1
	BNE PD21
	DEY             ; DONE?
	BNE PD11        ; NO
	DEX
	BPL PE30        ; BLINK AGAIN
	CPX #$FC        ; WAITED BETWEEN COUNTS?
	BNE PE40        ; NO
	BEQ PE20        ; ALWAYS - ALL AGAIN
DSKINT
	SEI
	CLD
	LDX #$FF
	STX IEEEDO
	STX PBDD1
	INX             ; .X = 0
	STX PBD2        ; CLEAR LED'S
	LDA #DAVO+EOIO+RFDO
	STA PAD2
	LDA #$1F
	STA PADD2
	LDA #ERRLED+LED0+LED1
	STA PBDD2
	STA PBDD2
;
;*********************************
;
; POWER UP DIAGNOSTIC
;
;*********************************
;
	LDY #0
	LDX #0
PU10
	TXA             ; FILL Z-PAGE ACCEND PATTERN
	STA $0,X
	INX
	BNE PU10
PU20
	TXA             ; CHECK PATTERN BY INC...
	CMP $0,X        ; ...BACK TO ORIG #
	BNE PEZRO       ; BAD BITS
PU30
	INC $0,X        ; BUMP CONTENTS
	CLC
	ADC #1          ; BUMP COUNT
	CMP $0,X        ; CHECK IT
	BNE PEZRO       ; WRONG
	CMP $1,X        ; CHECK IF DONE
	BNE PU30        ; NOT DONE
	TXA
	ADC #0          ; .A = .A+1, (.C = 1)
	CMP $0,X        ; DOUBLE CHECK FOR DONE
	BNE PEZRO       ; SOMETHING'S WRONG
	STY $0,X        ; LEAVE Z-PAGE ZEROED
	LDA $0,X        ; CHECK IT
	BNE PEZRO       ; WRONG
	INX             ; NEXT!
	BNE PU20        ; NOT ALL DONE
;
; SET CONTROLLER TO RESET IF SOFT RESET
;
	LDA #$78        ; SEI
	STA $1100
	LDA #$6C
	STA $1101
	LDA #$FC
	STA $1102
	LDA #$FF
	STA $1103       ; JMP ($FFFC)
	LDA #$D0
	STA JOBS
;
; TEST TWO 64K-BIT ROMS
;
; ENTER X = START PAGE
; EXIT IF OK
;
RM10
	INC TEMP        ; NEXT ERROR#
	STX IP+1        ; SAVE PAGE, START X = 0
	LDA #0
	STA IP          ; ZERO LO INDIRECT
	TAY
	LDX #32         ; 32 PAGES IN 8K ROM
	CLC
RT10
	DEC IP+1        ; DO IT BACKWARDS
RT20
	ADC (IP),Y      ; TOTAL CHECKSUM IN A
	INY
	BNE RT20
	DEX
	BNE RT10
	ADC #0          ; ADD IN LAST CARRY
	TAX             ; SAVE LOWER PAGE IN X
	CMP IP+1        ; CORRECT?
	BNE PERR2
	CPX #$C0        ; DONE BOTH ROMS?
	BNE RM10
;
; TEST ALL COMMON RAM
;
CR20
	LDA #$10        ; START OF 1ST BLOCK
CR30
	STA IP+1        ; SAVE PAGE#
	INC TEMP        ; BUMP ERROR#
RAMTST
	LDX #4          ; SAVE PAGE COUNT
RA10
	TYA             ; FILL WITH ADR SENSITIVE PATTERN
	CLC
	ADC IP+1
	STA (IP),Y
	INY
	BNE RA10
	INC IP+1
	DEX
	BNE RA10
	LDX #4          ; RESTORE PAGE COUNT
RA30
	DEC IP+1        ; CHECK PATTERN BACKWARDS
RA40
	DEY
	TYA             ; GEN PATTERN AGAIN
	CLC
	ADC IP+1
	CMP (IP),Y      ; OK?
	BNE PERR2       ; NO, SHOW ERROR#
	EOR #$FF        ; YES, TEST INVERSE PATTERN
	STA (IP),Y
	EOR (IP),Y      ; OK?
	STA (IP),Y      ; LEAVE MEMORY ZERO
	BNE PERR2       ; NO, SHOW ERROR#
	TYA
	BNE RA40
	DEX
	BNE RA30
	LDA IP+1        ; GET FIRST PAGE OF BLOCK
	CLC
	ADC #$10        ; NEXT BLOCK
	CMP #$50        ; DONE?
	BNE CR30        ; NO
;
;**********************************
;
; CONTROLLER TEST & INITIALIZATION
;
;**********************************
;
	LDA #3          ; SET ERROR# TO 3+1
	STA TEMP
	LDA #1
	CMP $1000       ; CHECK WAIT FLAG
	BNE PERR2       ; NOT GOOD
	LDY #0
	STY $1000       ; LET CONTROLLER GO
	LDA #ERRLED+LED0+LED1
	STA PBD2        ; FLIP LEDS ON DURING TEST
CTEST2
	LDA $1000
	BEQ CTEST2      ; WAIT FOR CONTROLLER
	CMP #1          ; CONTROLLER OK?
	BEQ DIAGOK      ; YES
	STA TEMP        ; CONTROLLER ERROR CODE
PERR2
	JMP PERR
DIAGOK
	JMP BEGIN       ; START OF DOS
.END
