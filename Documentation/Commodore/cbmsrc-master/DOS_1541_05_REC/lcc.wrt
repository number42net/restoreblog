.PAGE 'LCC.WRT'
;
;
;
;    * WRITE JOB
;
;    WRITE OUT DATA BUFFER
;
;
WRIGHT	CMP #$10        ; TEST IF WRITE
	BEQ WRT05
;
	JMP VRFY
;
WRT05	JSR CHKBLK      ; GET BLOCK CHECKSUM
	STA CHKSUM
;
	LDA DSKCNT      ; TEST FOR WRITE PROTECT
	AND #$10
	BNE WRT10       ; NOT  PROTECTED
;
	LDA #8          ; WRITE PROTECT ERROR
	JMP ERRR
;
WRT10	JSR BINGCR      ; CONVERT BUFFER TO WRITE IMAGE
;
	JSR SRCH        ; FIND HEADER
;
	LDX #GAP1-2     ; WAIT OUT HEADER GAP
;
WRT20	BVC *
	CLV
;
	DEX             ; TEST IF DONE YET
	BNE WRT20
;
	LDA #$FF        ; MAKE OUTPUT $FF
	STA DDRA2
;
	LDA PCR2        ; SET WRITE MODE
	AND #$FF-$E0
	ORA #$C0
	STA PCR2
;
	LDA #$FF        ; WRITE 5 GCR SYNC
	LDX #NUMSYN     ;
	STA DATA2
	CLV
;
WRTSNC	BVC *
;
	CLV
	DEX
	BNE WRTSNC
;
	LDY #256-TOPWRT ; WRITE OUT OVERFLOW BUFFER
;
WRT30	LDA OVRBUF,Y    ; GET A CHAR
	BVC *           ; WAIT UNTIL READY
	CLV
;
	STA DATA2       ; STUFF IT
	INY
	BNE WRT30       ; DO NEXT CHAR
;
         ; WRITE REST OF BUFFER
;
WRT40	LDA (BUFPNT),Y  ; NOW DO BUFFER
	BVC *           ; WAIT UNTIL READY
	CLV
;
	STA DATA2       ; STUFF IT AGAIN
	INY
    ; TEST IF DONE
	BNE WRT40       ; DO THE WHOLE THING
;
	BVC *           ; WAIT FOR LAST CHAR TO WRITE OUT
;
;
	LDA PCR2        ; GOTO READ MODE
	ORA #$E0
	STA PCR2
;
	LDA #0          ; MAKE DATA2 INPUT $00
	STA DDRA2
;
	JSR WTOBIN      ; CONVERT WRITE IMAGE TO BINARY
;
	LDY JOBN        ; MAKE JOB A VERIFY
	LDA JOBS,Y
	EOR #$30
	STA JOBS,Y
;
	JMP SEAK        ; SCAN JOB QUE
;
;
CHKBLK	LDA #0          ; GET EOR CHECKSUM
	TAY
;
CHKB10	EOR (BUFPNT),Y
	INY
	BNE CHKB10
;
	RTS             ; RETURN CHECKSUM IN .A
;
;
;
;
;    * WTOBIN
;
;    CONVERT WRITE IMAGE BACK TO
;    BINARY DATA
;
;
WTOBIN	LDA #0          ; INIT POINTER
	STA SAVPNT
	STA BUFPNT      ; LSB
	STA NXTPNT
;
	LDA BUFPNT+1    ;GOTO BUFFER NEXT
	STA NXTBF
;
	LDA #>OVRBUF    ; USE OVERFLOW FIRST
	STA BUFPNT+1
	STA SAVPNT+1
;
	LDA #256-TOPWRT
	STA GCRPNT      ; GET HERE FIRST
	STA BYTCNT      ; STORE HERE
;
	JSR GET4GB      ; GET FIRST FOUR- ID AND 3 DATA
;
	LDA BTAB        ; SAVE BID
	STA BID
;
	LDY BYTCNT
;
	LDA BTAB+1
	STA (SAVPNT),Y
	INY
;
	LDA BTAB+2
	STA (SAVPNT),Y
	INY
;
	LDA BTAB+3
	STA (SAVPNT),Y
	INY
;
	STY BYTCNT
;
WTOB14	JSR GET4GB      ;DO REST OF OVERFLOW BUFFER
;
	LDY BYTCNT
;
	LDA BTAB
	STA (SAVPNT),Y
	INY
;
	LDA BTAB+1
	STA (SAVPNT),Y
	INY
	BEQ WTOB50
;
	LDA BTAB+2
	STA (SAVPNT),Y
	INY
;
	LDA BTAB+3
	STA (SAVPNT),Y
	INY
;
	STY BYTCNT
	BNE WTOB14      ; JMP
;
WTOB50
;
	LDA BTAB+2
	STA (BUFPNT),Y
	INY
;
	LDA BTAB+3
	STA (BUFPNT),Y
	INY
;
	STY BYTCNT
;
WTOB53	JSR GET4GB
;
	LDY BYTCNT
;
	LDA BTAB
	STA (BUFPNT),Y
	INY
;
	LDA BTAB+1
	STA (BUFPNT),Y
	INY
;
	LDA BTAB+2
	STA (BUFPNT),Y
	INY
;
	LDA BTAB+3
	STA (BUFPNT),Y
	INY
;
	STY BYTCNT
	CPY #187
	BCC WTOB53
;
WTOB52	LDA #69         ; MOVE BUFFER UP
	STA SAVPNT
;
	LDA BUFPNT+1
	STA SAVPNT+1
;
	LDY #256-TOPWRT-1
;
WTOB55	LDA (BUFPNT),Y
	STA (SAVPNT),Y
;
	DEY
	BNE WTOB55
;
	LDA (BUFPNT),Y
	STA (SAVPNT),Y
;
	LDX #256-TOPWRT ; MOVE OVERFLOW OVER TO BUFFER
;
WTOB57	LDA OVRBUF,X
	STA (BUFPNT),Y
;
	INY
	INX
	BNE WTOB57
;
	STX GCRFLG      ; CLEAR BUFFER GCR FLAG
;
;
	RTS
;
;
;
;
;
;    * VERIFY DATA BLOCK
;
;   CONVERT TO GCR VERIFY IMAGE
;
;   TEST AGAINST DATA BLOCK
;
;   CONVERT BACK TO BINARY
;
;
VRFY	CMP #$20        ; TEST IF VERIFY
	BEQ VRF10
;
	JMP SECTSK
;
VRF10
;
	JSR CHKBLK      ; GET BLOCK CHECKSUM
	STA CHKSUM
;
	JSR BINGCR      ; CONVERT TO VERIFY IMAGE
;
	JSR DSTRT
;
	LDY #256-TOPWRT
VRF15	LDA OVRBUF,Y    ; GET CHAR
	BVC *
	CLV
;
	EOR DATA2       ; TEST IF SAME
	BNE VRF20       ;VERIFY ERROR
;
	INY
	BNE VRF15       ; NEXT BYTE
;
;
VRF30	LDA (BUFPNT),Y  ; NOW DO BUFFER
;
	BVC *
	CLV             ; WAIT FOR CHAR
;
	EOR DATA2       ; TEST IF SAME
	BNE VRF20       ; ERROR
;
	INY
	CPY #$FD        ; DONT TEST OFF BYTES
	BNE VRF30
;
;
	JMP DONE        ; VERIFY OK
;
VRF20	LDA #7          ; VERIFY ERROR
	JMP ERRR
;
;
SECTSK	JSR SRCH        ; SECTOR SEEK
	JMP DONE
;
;
.END
