.PAGE 'BLOCK COMMAND'
;
; USER COMMANDS
;
USER
	LDY CMDBUF+1
	CPY #'0
	BNE US10        ; 0 RESETS PNTR
USRINT
	LDA #<UBLOCK    ; SET DEFAULT BLOCK ADD
	STA USRJMP
	LDA #>UBLOCK
	STA USRJMP+1
	RTS
US10
	JSR USREXC      ; EXECUTE CODE BY TABLE
	JMP ENDCMD
USREXC
	DEY             ; ENTRY IS (((INDEX-1)AND$F)*2)
	TYA
	AND #$F
	ASL A
	TAY
	LDA (USRJMP),Y
	STA IP
	INY
	LDA (USRJMP),Y
	STA IP+1
	JMP (IP)
.PAGE 'BLOCK COMMANDS'
;
; OPEN DIRECT ACCESS BUFFER
; FROM OPEN "#"
;
OPNBLK
	LDA LSTDRV
	STA DRVNUM
	LDA SA
	PHA
	JSR AUTOI
	PLA
	STA SA
	LDX CMDSIZ
	DEX
	BNE OB10
	LDA #1          ; GET ANY BUFFER
	JSR GETRCH
	JMP OB30
OB05
	LDA #NOCHNL
	JMP CMDERR
OB10
	LDY #1          ; BUFFER # IS REQUESTED
	JSR BP05
	LDX FILSEC
	CPX #BAMJOB     ; MUST BE LESS THAN 13
	BCS OB05
	LDA #0
	STA TEMP
	STA TEMP+1
	SEC
OB15
	ROL TEMP
	ROL TEMP+1
	DEX
	BPL OB15
	LDA TEMP
	AND BUFUSE
	BNE OB05        ; BUFFER IS USED
	LDA TEMP+1
	AND BUFUSE+1
	BNE OB05        ; BUFFER IS USED
	LDA TEMP
	ORA BUFUSE      ; SET BUFFER AS USED
	STA BUFUSE
	LDA TEMP+1
	ORA BUFUSE+1
	STA BUFUSE+1
	LDA #0          ; SET UP CHANNEL
	JSR GETRCH
	LDX LINDX
	LDA FILSEC
	STA BUF0,X
	TAX
	LDA DRVNUM
	STA LSTJOB,X
OB30
	LDX SA
	LDA LINTAB,X    ; SET LINDX TABLE
	ORA #$40
	STA LINTAB,X
	LDY LINDX
	LDA #$FF
	STA LSTCHR,Y
	LDA #RNDRDY
	STA CHNRDY,Y    ; SET CHANNEL READY
	LDA BUF0,Y
	STA CHNDAT,Y    ; BUFFER # AS 1ST CHAR
	ASL A
	TAX
	LDA #1
	STA BUFTAB,X
	LDA #DIRTYP+DIRTYP
	STA FILTYP,Y    ; SET DIRECT FILE TYPE
	JMP ENDCMD
;
; BLOCK COMMANDS
;
BLOCK
	LDY #0
	LDX #0
	LDA #'-         ; '-' SEPARATES CMD FROM SUBCMD
	JSR PARSE       ; LOCATE SUB-CMD
	BNE BLK40
BLK10
	LDA #BADCMD
	JMP CMDERR
BLK30
	LDA #BADSYN
	JMP CMDERR
BLK40
	TXA
	BNE BLK30
	LDX #NBCMDS-1   ; FIND COMMAND
	LDA CMDBUF,Y
BLK50
	CMP BCTAB,X
	BEQ BLK60
	DEX
	BPL BLK50
	BMI BLK10
BLK60
	TXA
	ORA #$80
	STA CMDNUM
	JSR BLKPAR      ; PARSE PARMS
	LDA CMDNUM
	ASL A
	TAX
	LDA BCJMP+1,X
	STA TEMP+1
	LDA BCJMP,X
	STA TEMP
	JMP (TEMP)      ; GOTO COMMAND
BCTAB
	.BYTE 'AFRWEP'
NBCMDS	= *-BCTAB
BCJMP
	.WORD BLKALC    ; BLOCK-ALLOCATE
	.WORD BLKFRE    ; BLOCK-FREE
	.WORD BLKRD     ; BLOCK-READ
	.WORD BLKWT     ; BLOCK-WRITE
	.WORD BLKEXC    ; BLOCK-EXECUTE
	.WORD BLKPTR    ; BLOCK-POINTER
BLKPAR
	LDY #0          ; PARSE BLOCK PARMS
	LDX #0
	LDA #':
	JSR PARSE
	BNE BP05        ; FOUND ':'
	LDY #3          ; ELSE CHAR #3 IS BEGINNING
BP05
	LDA CMDBUF,Y
	CMP #' 
	BEQ BP10
	CMP #29         ; SKIP CHARACTER
	BEQ BP10
	CMP #',
	BNE BP20
BP10
	INY
	CPY CMDSIZ
	BCC BP05
	RTS             ; THAT'S ALL
BP20
	JSR ASCHEX
	INC F1CNT
	LDY F2PTR
	CPX #MXFILS-1
	BCC BP10
	BCS BLK30       ; BAD SYNTAX
;
; CONVERT ASCII TO HEX (BINARY)
; & STORE CONVERSION IN TABLES
; .Y = PTR INTO CMDBUF
;
ASCHEX
	LDA #0
	STA TEMP
	STA TEMP+1
	STA TEMP+3
	LDX #$FF
AH10
	LDA CMDBUF,Y    ; TEST FOR DEC #
	CMP #$40
	BCS AH20        ; NON-NUMERIC TERMINATES
	CMP #$30
	BCC AH20        ; NON-NUMERIC
	AND #$F
	PHA
	LDA TEMP+1      ; SHIFT DIGITS (*10)
	STA TEMP+2
	LDA TEMP
	STA TEMP+1
	PLA
	STA TEMP
	INY
	CPY CMDSIZ
	BCC AH10        ; STILL IN STRING
AH20
	STY F2PTR       ; CONVERT DIGITS TO...
	CLC             ; ...BINARY BY DEC TABLE
	LDA #0
AH30
	INX
	CPX #3
	BCS AH40
	LDY TEMP,X
AH35
	DEY
	BMI AH30
	ADC DECTAB,X
	BCC AH35
	CLC
	INC TEMP+3
	BNE AH35
AH40
	PHA
	LDX F1CNT
	LDA TEMP+3
	STA FILTRK,X    ; STORE RESULT IN TABLE
	PLA
	STA FILSEC,X
	RTS
DECTAB
	.BYTE 1,10,100  ; DECIMAL TABLE
;
; BLOCK-FREE
;
BLKFRE
	JSR BLKTST
	JSR FRETS
	JMP ENDCMD
;
; BLOCK-ALLOCATE
;
BLKALC
	JSR BLKTST
BA10
	LDA SECTOR
	PHA
	JSR GETSEC
	BEQ BA15        ; NONE GREATER ON THIS TRACK
	PLA
	CMP SECTOR
	BNE BA30        ; REQUESTED SECTOR NOT AVAIL
	JSR USEDTS
	JMP ENDCMD
BA15
	PLA             ; POP STACK
BA20
	LDA #0
	STA SECTOR
	INC TRACK
	LDA TRACK
	CMP MAXTRK
	BCS BA40        ; GONE ALL THE WAY
	JSR GETSEC
	BEQ BA20
BA30
	LDA #NOBLK
	JSR CMDER2
BA40
	LDA #NOBLK
	JSR CMDERR      ; T = 0, S = 0, NONE LEFT
;
; BLOCK READ SUBS
;
BLKRD2
	JSR BKOTST      ; TEST PARMS
	JMP DRTRD
GETSIM
	JSR GETPRE      ; GET BYTE W/O INC
	LDA (BUFTAB,X)
	RTS
;
; BLOCK READ
;
BLKRD3
	JSR BLKRD2
	LDA #0
	JSR SETPNT
	JSR GETSIM      ; .Y = LINDX
	STA LSTCHR,Y
	LDA #RNDRDY
	STA CHNRDY,Y
	RTS
BLKRD
	JSR BLKRD3
	JSR RNGET1
	JMP ENDCMD
;
; USER DIRECT READ, LSTCHR = $FF
;
UBLKRD
	JSR BLKPAR
	JSR BLKRD3
	LDA LSTCHR,Y
	STA CHNDAT,Y
	LDA #$FF
	STA LSTCHR,Y
	JMP ENDCMD      ; (RTS)
;
; BLOCK-WRITE
;
BLKWT
	JSR BKOTST
	JSR GETPNT
	TAY
	DEY
	CMP #2
	BCS BW10
	LDY #1
BW10
	LDA #0          ; SET RECORD SIZE
	JSR SETPNT
	TYA
	JSR PUTBYT
	TXA
	PHA
BW20
	JSR DRTWRT      ; WRITE BLOCK
	PLA
	TAX
	LDY LINDX
	JSR RNGET2
	JMP ENDCMD
;
; USER DIRCT WRITE, NO LSTCHR
;
UBLKWT
	JSR BLKPAR
	JSR BKOTST
	JSR DRTWRT
	JMP ENDCMD
;
; BLOCK-EXECUTE
;
BLKEXC
	JSR KILLP       ; KILL PROTECT
	JSR BLKRD2      ; READ BLOCK & EXECUTE
	LDA #0
BE05
	STA TEMP
	LDX JOBNUM
	LDA BUFIND,X
	STA TEMP+1
	JSR BE10        ; INDIRECT JSR
	JMP ENDCMD
BE10
	JMP (TEMP)
;
; BUFFER-POINTER, SET BUFFER POINTER
;
BLKPTR
	JSR BUFTST
	LDA JOBNUM
	ASL A
	TAX
	LDA FILSEC+1
	STA BUFTAB,X
	JSR GETPRE
	JSR RNGET2      ; SET UP GET
	JMP ENDCMD
;
; TEST FOR ALLOCATED BUFFER..
; ..RELATED TO SA
;
BUFTST
	LDX F1PTR
	INC F1PTR
	LDA FILSEC,X
	TAY
	DEY
	DEY
	CPY #BAMJOB
	BCC BT20
BT15
	LDA #NOCHNL
	JMP CMDERR
BT20
	STA SA
	JSR FNDRCH
	BCS BT15
	JSR GETACT
	STA JOBNUM
	RTS
;
; TEST BLOCK OPERATION PARMS
;
BKOTST
	JSR BUFTST
;
; TEST FOR LEGAL BLOCK &..
; ..SET UP DRV, TRK, SEC
;
BLKTST
	LDX F1PTR
	LDA FILSEC,X
	AND #1
	STA DRVNUM
	LDA FILSEC+2,X
	STA SECTOR
	LDA FILSEC+1,X
	STA TRACK
BT05
	JSR TSCHK
	JMP SETLDS      ; (RTS)
.END
