	.page
	.subttl SOUND Command

;*****************************************************************************
;*
;*  SOUND - Produce sound effects
;*
;*	Syntax : SOUND v, f, d [,[dir] [,[m] [,[s] [,[w] [,p] ]]]]
;*
;*	where : v = voice (1..3)
;*		f = frequency value (0..65535)
;*		d = duration (0..32767 jiffys)
;*		dir = step direction (0(up) ,1(down) or 2(oscillate)) default=0
;*		m = minimum frequency (if sweep is used) (0..65535) default=0
;*		s = step value for effects (0..32767) default=0
;*		w = waveform (0=triangle,1=saw,2=square,3=noise) default=2
;*		p = pulse width (0..4095) default=2048 (50% duty cycle)
;*
;*****************************************************************************

sound	jsr getbyt		;get voice number in .X
	dex			;adjust 1..3 to 0..2
	cpx #3
	bcc 10$
98$	jmp fcerr		;illegal value

10$	stx sound_voice

; get frequency

	jsr comwrd		;eat comma, get frequency in y,a
	sty temp_max_lo		;save our copy of max, also set up as current
	sta temp_max_hi
	sty temp_freq_lo
	sta temp_freq_hi

; get duration

	jsr comwrd		;eat comma, get number of jiffys to play
	cmp #$80
	bcs 98$
	sty temp_time_lo
	sta temp_time_hi


; get sweep direction

	jsr optzer		;get optional sweep (default = 0, up)
	cpx #3
97$	bcs 98$
	txa
	sta temp_direction
	and #1			;set .Z if sweep up or oscillate
	php			;save .Z for step (below)


; get minimum frequency value (sweep lo)

	jsr optwrd
	sty temp_min_lo
	sta temp_min_hi

; get step value for sweep

	jsr optwrd		;get optional step, default is zero
	plp			;get flags from direction
	beq 75$			;branch if 'up' or oscillate
	pha			;if 'down', make step 2's complement
	tya
	eor #$ff
	clc
	adc #1
	tay
	pla
	eor #$ff
	adc #0
75$	sta temp_step_hi
	tya
	sta temp_step_lo

; get waveform

	ldx #2			;get waveform. default is square (2)
	jsr optbyt
	cpx #4
	bcs 97$			;illegal value
	lda sbits+4,x		;get bit pattern for selected waveform
	ora #1			;add in the gate bit
	sta temp_waveform

; get pulse width

	jsr optwrd		;get optional pulse width in y,a
	bcs 80$
	lda #8			;no arg's given, use default pusle width
	ldy #0
80$	cmp #16
	bcs 98$
	sty temp_pulse_lo
	sta temp_pulse_hi

; all arg's in, time to get to work

	lda temp_time_lo
	ora temp_time_hi
	beq 100$		;special case: time=0 means 'kill it NOW'

; wait for all current uses of this voice to time out

	ldx sound_voice		;first test 'PLAY'
	txa			;make an index into PLAY's tables
	asl a
	tay
60$	lda voices+1,y
	bpl 60$

70$	lda sound_time_hi,x	;now test 'SOUND'
	bpl 70$

; all clear, now set up for current effect

	ldy #0			;download max freq l&h, min freq l&h,
90$	lda temp_max_lo,y	;..sweep direction, step value l&h, & freq l&h
	sta sound_max_lo,x
	inx
	inx
	inx
	iny
	cpy #9
	bne 90$

; now set up sid

	ldx sound_voice
	ldy offtab,x		;get index to sid's voices
	jsr put_io_in_map

	lda #$08		;turn off sid's gate
	sta sid+4,y

	lda #0			;set up attack & decay,
	sta sid+5,y
	lda #$f0		;..and sustain & release
	sta sid+6,y

	ldx #0			;set up freq (l&h), pulse width (l&h), & waveform
95$	lda temp_freq_lo,x
	sta sid,y
	iny
	inx
	cpx #5
	bne 95$

; now set up time to play

100$	ldx sound_voice
	ldy temp_time_lo
	lda temp_time_hi

	sei
	sta sound_time_hi,x
	tya
	sta sound_time_lo,x
	cli

	rts

;end

