	.page
	.subttl 'trig'

			;
			;sine, cosine, and tangent functions.
			;
			;cosine function
			;use cos(x)=sin(x+pi/2)
cos
	lda #<pi2	;pointer to pi/2
	ldy #>pi2
	jsr romadd	;add it in. fall into sine.
			;
			;sine function.
			;
			;use identities to get fac in quadrants I or IV.
			;the fac is divided by 2*pi and the integer part 
			;is ignored because sin(x+2*pi)=sin(x). then the 
			;argument can be compared with pi/2 by comparing 
			;the result of the division with pi/2(2*pi)=1/4.
			;identities are then used to get the result in 
			;quadrants I or IV. an approximation polynomial
			;is then used  to compute sin(x).
			;
sin
	jsr movaf
	lda #<twopi	;get pointer to divisor.
	ldy #>twopi
	ldx argsgn	;geet sign of result.
	jsr fdivf
	jsr movaf	;get result into arg.
	jsr int		;integerize fac.
	lda #0
	sta arisgn	;always have the same sign.
	jsr fsubt	;keep only the fractional part.
	lda #<fr4	;get pointer to 1/4.
	ldy #>fr4
	jsr romsub
	lda facsgn	;save sign for later.
	pha
	bpl sin1	;first quadrant.
	jsr faddh	;add 1/2 to fac.
	lda facsgn	;sign is negative?
	bmi sin2	
	lda tansgn	;quads II and III come here.
	eor #$ff
	sta tansgn
sin1
	jsr negop	;if positive, negate it.
sin2
	lda #<fr4	;pointer to 1/4.
	ldy #>fr4
	jsr romadd	;add it in.
	pla		;get original quadrant.
	bpl sin3
	jsr negop	;if negative, negate result.
sin3
	lda #<sincon
	ldy #>sincon
	jmp polyx	;do approximation polyomial


			; tangent function.
tan
	jsr mov1f	;move fac into temporary.
	lda #0
	sta tansgn	;remember whether to negate.
	jsr sin		;compute the sin.
	ldx #<tempf3
	ldy #>tempf3
	jsr movmf	;put sign into other temp.
	lda #<tempf1
	ldy #>tempf1
	jsr movfm	;put this memory location into fac.
	lda #0
	sta facsgn	;start off positive.
	lda tansgn
	jsr cosc	;compute cosine.
	lda #<tempf3
	ldy #>tempf3	;address of sine value.
	jmp fdiv	;divide sine by cosine and return.

cosc
	pha
	jmp sin1


pi2	.byte @201,@111,@17,@332,@242

twopi	.byte @203,@111,@17,@332,@242

fr4	.byte @177,0,0,0,0

sincon	.byte 5,@204,@346,@32,@55	;degree-1.
	.byte @33,@206,@50,@7,@373
	.byte @370,@207,@231,@150,@211
	.byte 1,@207,@43,@65,@337,@341
	.byte @206,@245,@135,@347,@50,@203
	.byte @111,@17,@332,@242

			;
			;arctangent function
			;
			;use identities to get arg between 0 and 1 and then use
			;an approximation polynomial to compute arctan(x).
			;
atn
	lda facsgn	;what is sign?
	pha		;save for later.
	bpl atn1
	jsr negop	;if negative, negate fac.
atn1			;use arctan(x)=-arctan(-x).
	lda facexp	
	pha		;save this too for later.
	cmp #@201	;see if fac .ge. 1.0.
	bcc atn2	;it is less than 1
	lda #<fone	;get pntr to 1.0.
	ldy #>fone
	jsr romdiv	;compute reciprocal.
atn2			;use aectan(x)=pi/2-arctan(1/x).
	lda #<atncon	;pointer to arctan constants.
	ldy #>atncon
	jsr polyx
	pla
	cmp #@201	;was original argument .lt.1?
	bcc atn3	;yes.
	lda #<pi2
	ldy #>pi2
	jsr romsub	;subtract arctan from pi/2.
atn3
	pla		;was original aurgument positive?
	bpl atn4	;yes.
	jmp negop	;if negative, negate result.
	
atn4	rts		;all done.


atncon	.byte @13,@166,@263,@203	;degree-1.
	.byte @275,@323,@171,@36,@364
	.byte @246,@365,@173,@203,@374
	.byte @260,@20
	.byte @174,@14,@37,@147,@312
	.byte @174,@336,@123,@313,@301
	.byte @175,@24,@144,@160,@114
	.byte @175,@267,@352,@121,@172
	.byte @175,@143,@60,@210,@176
	.byte @176,@222,@104,@231,@72
	.byte @176,@114,@314,@221,@307
	.byte @177,@252,@252,@252,@23
	.byte @201,0,0,0,0

;.end
