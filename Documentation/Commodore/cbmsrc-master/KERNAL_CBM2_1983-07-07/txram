.PAG 'TXRAM'
; 02/28/83 BP
; TRANSFER EXEC ROUTINES FOR CBM2
; RAM ROUTINE TO SOFT LOAD
E6509	=$0000          ;6509 EXEC REGISTER
I6509	=$0001          ;6509 IND REGISTER
IPOINT	= $00AC
STACKP	= $01FF
EXSUB	=$FEAB
	*=EXSUB-78
TXIRQ	;ENTRY FOR IRQ/BRK RAM SEGMENT
	STA IPOINT      ;SAVE .A IN TMP
	PLA             ;REAL .P
	PHA             ;RESTORE .P FOR RTI
	STA IPOINT+1    ;TMP .P
	LDA I6509       ;SAVE I6509
	PHA
	LDA IPOINT+1    ;RESTORE .P IN .A
	JSR TXIRQ2      ;SAVE THIS RTS ADDR
	STA IPOINT      ;SAVE .A IN TMP
	PLA             ;SO WE CAN RESTORE I6509
	STA I6509
	LDA IPOINT      ;RESTORE .A FROM TMP
	RTI             ;NOW WE CAN RTI
;
TXNMI	;ENTRY FOR NMI RAM SEGMENT
	PHA             ;SAVE .A
	LDA IPOINT      ;SAVE IPOINT
	PHA
	LDA IPOINT+1
	PHA
	LDA STACKP      ;SAVE STACKP
	PHA
	LDA I6509       ;SAVE I6509
	PHA
	JSR EXNMI       ;CALL NMI AS SUB IN SEG F
	PLA
	STA I6509       ;RESTORE I6509
	PLA
	STA STACKP      ;RESTORE STACKP
	PLA
	STA IPOINT+1    ;RESTORE IPOINT
	PLA
	STA IPOINT      ;RESTORE .A
	RTI
TXIRQ2	AND #$10        ;TEST FOR BRK OR IRQ
	BNE EXBRKX      ;IT'S A BRK
	LDA IPOINT      ;RESTORE .A
	JMP EXIRQ       ;GO IRQ
EXBRKX	LDA IPOINT      ;RESTORE .A
	JMP EXBRK       ;GO BRK
EXSUBF	PHP             ;SAVE STATUS
	PHA             ;SAVE.A
	LDA #$0F        ;SYSTEM SEGMENT
	STA I6509       ;SET UP IND POINTER
	PLA             ;RESTORE .A
	PLP             ;RESTORE STATUS
	JMP EXSUB
	*=EXSUB
	PHP             ;SAVE STATUS
	SEI
	PHA             ;.A
	TXA
	PHA             ;.X
	TYA
	PHA             ;.Y
	JSR IPINIT      ;INIT IPOINT AND LOAD STACK FROM XFER SEG
	TAY             ;.Y IS XFER SEG STACK POINTER
	LDA E6509       ;PUSH RETURN SEGMENT TO USER STACK
	JSR PUTAS       ;PUSH .A TO OTHER STACK
	LDA #<EXCRT2    ;XFER SEG RTS ROUTN
	LDX #>EXCRT2    ;XFER SEG RTS ROUTN
	JSR PUTAXS      ;PUT .A.X TO XFER SEG STACK
	TSX
	LDA $0105,X     ;.SP +5 IS ACTUAL ROUTN ADDR LO
	SEC
	SBC #03         ;-3 FOR JSR TO THIS ROUTN
	PHA             ;SAVE .A
	LDA $0106,X     ;HI ADDR
	SBC #00
	TAX             ;.X HI
	PLA             ;RESTORE .A LO
	JSR PUTAXS      ;SAVE .A.X ONTO XFER SEG STACK
	TYA             ;XFER SEG STACK POINTER
EXCOMM	SEC
	SBC #04         ;4 BYTES .Y.X.A.P
	STA STACKP      ;XFER SEG NEW STACK POINTER TEMP STORAGE
	TAY             ;USE THIS AS NEW POINTER ALSO
	LDX #04         ;4 BYTES .Y.X.A.P
EXSU10	PLA
	INY
	STA (IPOINT),Y  ;PUSH REGS FROM THIS STACK TO XFER SEG STACK
	DEX
	BNE EXSU10
	LDY STACKP      ;RESTORE .Y AS STACK POINTER FOR XFER SEG
	LDA #<EXPUL2    ;PULL REGS AND RTS ROUTN
	LDX #>EXPUL2    ;.HI PRENDN ROUTN IN XFER SEG
	JSR PUTAXS      ;PUT .A.X ON XFER SEG STACK
	PLA             ;FIX STACK
	PLA             ;FIX STACK
EXGBYE	TSX
	STX STACKP      ;SAVE CURRENT STACK POINTER THIS SEG
	TYA             ;.Y IS STACK POINTER FOR XFER SEG
	TAX
	TXS             ;NEW STACK FOR XFER SEG
	LDA I6509       ;XFER SEG #
	JMP GBYE        ;GOOD BYE
;
	NOP             ;RETURNS HERE IF RTI
EXCRTS	PHP             ;.P
	PHP             ;.P
	PHA             ;.A
	TXA
	PHA             ;.X
	TYA
	PHA             ;.Y
	TSX
	LDA $0106,X     ;.SP +6 IS RETURN SEG
	STA I6509       ;RESTORE I6509 TO RETURN SEG
	JSR IPINIT      ;INIT IPOINT AND LOAD STACK FROM XFER SEG
	JMP EXCOMM
;
IPINIT	LDY #01
	STY IPOINT+1
	DEY
	STY IPOINT      ;IPOINT=$0100
	DEY             ;.Y =$FF
	LDA (IPOINT),Y  ;LOAD STACK POINTER FROM $001FF
	RTS
PUTAXS	PHA             ;SAVE .A
	TXA
	STA (IPOINT),Y  ;.X HI
	DEY
	PLA
PUTAS	STA (IPOINT),Y  ;.A LO
	DEY
	RTS
;
EXPULL	PLA
	TAY             ;.Y
	PLA
	TAX             ;.X
	PLA             ;.A
	PLP             ;.P
	RTS             ;.P
;
EXNMI	JSR EXSUBF      ;EX NMI IN SEG F
	NOP             ;MAKE ROOM
EXBRK	JSR EXSUBF      ;EX BRK IN SEG F
EXIRQ	JSR EXSUBF      ;EX IRQ IN SEG F
;
EXCRT2=EXCRTS-1
EXPUL2=EXPULL-1
	* =$FF6F
.PAG 'JUMP TABLE/VECTORS'
VRESET	JSR EXSUBF      ;POWER-ON/OFF VECTOR RESET
IPCGO	JSR EXSUBF      ;LOOP FOR IPC SYSTEM
FUNKEY	JSR EXSUBF      ;FUNCTION KEY VECTOR
IPRQST	JSR EXSUBF      ;SEND IPC REQUEST
IOINIT	JSR EXSUBF      ;I/O INITIALIZATION
CINT	JSR EXSUBF      ;SCREEN INITIALIZATION
ALOCAT	JSR EXSUBF      ;ALLOCATION ROUTINE
VECTOR	JSR EXSUBF      ;READ/SET I/O VECTORS
RESTOR	JSR EXSUBF      ;RESTORE I/O VECTORS
LKUPSA	JSR EXSUBF      ;MATCH SA--RETURN SA,FA
LKUPLA	JSR EXSUBF      ;MATCH LA--RETURN SA,FA
SETMSG	JSR EXSUBF      ;CONTROL O.S. MESSAGES
SECND	JSR EXSUBF      ;SEND SA AFTER LISTEN
TKSA	JSR EXSUBF      ;SEND SA AFTER TALK
MEMTOP	JSR EXSUBF      ;SET/READ TOP OF MEMORY
MEMBOT	JSR EXSUBF      ;SET/READ BOTTOM OF MEMORY
SCNKEY	JSR EXSUBF      ;SCAN KEYBOARD
SETTMO	JSR EXSUBF      ;SET TIMEOUT IN IEEE
ACPTR	JSR EXSUBF      ;HANDSHAKE IEEE BYTE IN
CIOUT	JSR EXSUBF      ;HANDSHAKE IEEE BYTE OUT
UNTLK	JSR EXSUBF      ;SEND UNTALK OUT IEEE
UNLSN	JSR EXSUBF      ;SEND UNLISTEN OUT IEEE
LISTN	JSR EXSUBF      ;SEND LISTEN OUT IEEE
TALK	JSR EXSUBF      ;SEND TALK OUT IEEE
READST	JSR EXSUBF      ;READ/WRITE I/O STATUS BYTE
SETLFS	JSR EXSUBF      ;SET LA, FA, SA
SETNAM	JSR EXSUBF      ;SET LENGTH AND FN ADR
OPEN	JSR EXSUBF      ;OPEN LOGICAL FILE/TRANSMIT COMMAND
CLOSE	JSR EXSUBF      ;CLOSE LOGICAL FILE
CHKIN	JSR EXSUBF      ;OPEN CHANNEL IN
CKOUT	JSR EXSUBF      ;OPEN CHANNEL OUT
CLRCH	JSR EXSUBF      ;CLOSE I/O CHANNEL
BASIN	JSR EXSUBF      ;INPUT FROM CHANNEL
BSOUT	JSR EXSUBF      ;OUTPUT TO CHANNEL
LOAD	JSR EXSUBF      ;LOAD FROM FILE
SAVE	JSR EXSUBF      ;SAVE TO FILE
SETTIM	JSR EXSUBF      ;SET INTERNAL CLOCK
RDTIM	JSR EXSUBF      ;READ INTERNAL CLOCK
STOP	JSR EXSUBF      ;SCAN STOP KEY
GETIN	JSR EXSUBF      ;GET CHAR FROM Q
CLALL	JSR EXSUBF      ;CLOSE ALL FILES
UDTIM	JSR EXSUBF      ;INCREMENT CLOCK
SCRORG	JSR EXSUBF      ;SCREEN ORG
PLOT	JSR EXSUBF      ;READ/SET X,Y COORD
IOBASE	JSR EXSUBF      ;RETURN I/O BASE
.SKI 5
GBYE	STA E6509       ;GOODBYE...
	RTS
	*=$FFFA
	.WOR TXNMI      ;TRANSFER NMI
	.BYT 'BP'            ;BENNY PRUDEN
	.WOR TXIRQ      ;TRANSFER IRQ
.END
