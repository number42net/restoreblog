.PAGE 'ERPROC'
;
; ERROR PROCESSING 
;
; CONTROLLER ERRORS
;
;  0  (1)   NO ERROR
; 20  (2)   CAN'T FIND BLOCK HEADER
; 21  (3)   NO SYNCH CHARACTER
; 22  (4)   DATA BLOCK NOT PRESENT
; 23  (5)   CHECKSUM ERROR IN DATA
; 24  (16)  BYTE DECODING ERROR
; 25  (7)   WRITE-VERIFY ERROR
; 27  (9)   CHECKSUM ERROR IN HEADER
; 75  (12)  FORMAT ERROR
; 76  (127) CONTROLLER ERROR
;
; COMMAND ERRORS
;
; 30  GENERAL SYNTAX
; 31  INVALID COMMAND
; 32  LONG LINE
; 33  INVALID FILNAME
; 34  NO FILE GIVEN
; 39  COMMAND FILE NOT FOUND
;
; 50  RECORD NOT PRESENT
; 51  OVERFLOW IN RECORD
; 52  FILE TOO LARGE
;
; 60  FILE OPEN FOR WRITE
; 61  FILE NOT OPEN
; 62  FILE NOT FOUND
; 63  FILE EXISTS
; 64  FILE TYPE MISMATCH
; 65  NO BLOCK
; 66  ILLEGAL TRACK OR SECTOR
; 67  ILLEGAL SYSTEM T OR S
;
; 70  NO CHANNELS AVAILABLE
; 71  DIRECTORY ERROR
; 72  DISK FULL
; 73  CBM DOS V3.0
; 74  DRIVE NOT READY
;
;  1  FILES SCRATCHED RESPONSE
;
BADSYN	= $30
BADCMD	= $31
LONGLN	= $32
BADFN	= $33
NOFILE	= $34
NOCFIL	= $39
NOREC	= $50
RECOVF	= $51
BIGFIL	= $52
FILOPN	= $60
FILNOP	= $61
FLNTFD	= $62
FLEXST	= $63
MISTYP	= $64
NOBLK	= $65
BADTS	= $66
SYSTS	= $67
NOCHNL	= $70
DIRERR	= $71
DSKFUL	= $72
CBMVER	= $73
NODRIV	= $74
FMTERR	= $75
CNTERR	= $76
.PAGE
;
; ERROR MESSAGE TABLE
; LEADING ERRROR NUMBERS,
; TEXT WITH 1ST & LAST CHARS
; OR'ED WITH $80,
; TOKENS FOR KEY WORDS ARE
;   LESS THAN $10 (AND'ED W/ $80)
;
ERRTAB
;" OK"
	.BYTE 0,$A0,'O',$CB
;"READ ERROR"
	.BYTE $20,$21,$22,$23,$24,$27
	.BYTE $D2,'EAD',$89
;" FILE TOO LARGE"
	.BYTE $52,$83,' TOO LARG',$C5
;" RECORD NOT PRESENT"
	.BYTE $50,$8B,6,' PRESEN',$D4
;"OVERFLOW IN RECORD"
	.BYTE $51,$CF,'VERFLOW '
	.BYTE 'IN',$8B
;" WRITE ERROR"
	.BYTE $25,$28,$8A,$89
;"SYNTAX ERROR"
	.BYTE $30,$31,$32,$33,$34
	.BYTE $D3,'YNTAX',$89
;" WRITE FILE OPEN"
	.BYTE $60,$8A,3,$84
;" FILE EXISTS"
	.BYTE $63,$83,' EXIST',$D3
;" FILE TYPE MISMATCH"
	.BYTE $64,$83,' TYPE',$85
;"NO BLOCK"
	.BYTE $65,$CE,'O BLOC',$CB
;"ILLEGAL TRACK OR SECTOR"
	.BYTE $66,$67,$C9,'LLEGAL TRACK'
	.BYTE ' OR SECTO',$D2
;" FILE NOT OPEN"
	.BYTE $61,$83,6,$84
;" FILE NOT FOUND"
	.BYTE $39,$62,$83,6,$87
;" FILES SCRATCHED"
	.BYTE 1,$83,'S SCRATCHE',$C4
;"NO CHANNEL"
	.BYTE $70,$CE,'O CHANNE',$CC
;"DIR ERROR"
	.BYTE $71,$C4,'IR',$89
;" DISK FULL"
	.BYTE $72,$88,' FUL',$CC
;"CBM DOS V3.0"
	.BYTE $73,$C3,'BM DOS V3.',$B0
;"DRIVE NOT READY"
	.BYTE $74,$C4,'RIVE',$6,' READ',$D9
;"FORMAT ERROR"
	.BYTE $75,$C6,'ORMAT',$89
;"CONTROLLER ERROR"
	.BYTE $76,$C3,'ONTROLLER',$89
ERRTOK	=*-ERRTAB
;
; ERROR TOKEN KEY WORDS
; WORDS USED MORE THAN ONCE
;
;"ERROR"
	.BYTE 9,$C5,'RRO',$D2
;"WRITE"
	.BYTE $A,$D7,'RIT',$C5
;"FILE"
	.BYTE 3,$C6,'IL',$C5
;"OPEN"
	.BYTE 4,$CF,'PE',$CE
;"MISMATCH"
	.BYTE 5,$CD,'ISMATC',$C8
;"NOT"
	.BYTE 6,$CE,'O',$D4
;"FOUND"
	.BYTE 7,$C6,'OUN',$C4
;"DISK"
	.BYTE 8,$C4,'IS',$CB
;"RECORD"
	.BYTE $B,$D2,'ECOR',$C4
ETEND	= *
.PAGE
;
; RECURSIVE ERROR MESSAGE ROUTINE
;
ERMOVE
	TAX             ; SAVE .A
	LDA R0
	PHA             ; SAVE R0
	LDA R0+1
	PHA             ; SAVE R0+1
	LDA #<ERRTAB    ; SET POINTER TO TABLE
	STA R0
	LDA #>ERRTAB
	STA R0+1
	TXA             ; RESTORE .A
	LDX #0          ; FOR INDIRECT
E10
	CMP (R0,X)      ; ERROR# = TABLE ENT?
	BEQ E50         ; YES, SEND MSG
	PHA             ; SAVE ERROR
	JSR EADV2       ; CHECK AND ADVANCE
	BCC E30         ; MORE #'S TO CHECK
E20
	JSR EADV2       ; ADVANCE PAST THIS MSG
	BCC E20
E30
	LDA R0+1        ; CHECK PTR
	CMP #>ETEND
	BCC E40         ; CONTINUE
	BNE E45         ; QUIT
	LDA #<ETEND
	CMP R0
	BCC E45         ; PAST END OF TABLE
E40
	PLA             ; RESTORE ERROR #
	JMP E10         ; CHECK NXT ENT
E45
	PLA             ; RESTORE ERROR #
	JMP E90         ; QUIT
E50
	JSR EADV1
	BCC E50         ; GO PAST OTHER #'S
E55
	JSR E60
	JSR EADV1
	BCC E55
	JSR E60         ; CHECK FOR TOKEN OR LAST CHAR
	JMP E90
E60
	CMP #$20        ; MAX TOKEN+1
	BCS E70         ; NOT A TOKEN
	TAX
	LDA #$20        ; IMPLIED SPACE
	STA (CB+2),Y    ; ADD TO ERRBUF
	INY
	TXA
	JSR ERMOVE      ; ADD TOKEN MSG
	RTS
E70
	STA (CB+2),Y    ; ADD TO ERRBUF
	INY
	RTS
E90
	PLA
	STA R0+1
	PLA
	STA R0
	RTS
EADV1
	INC R0
	BNE EA10
	INC R0+1
EA10
	LDA (R0,X)
	ASL A
	LDA (R0,X)
	AND #$7F
	RTS
EADV2
	JSR EA10
	INC R0
	BNE EA20
	INC R0+1
EA20
	RTS
;
; CONTROLLER ERROR ENTRY
; .A = ERROR #
; .X = JOB #
;
JERROR
	PHA
	CMP #12         ; FORMAT ERROR
	BNE ERROR1
	LDA #FMTERR
	BNE JCDER2      ; JUMP
ERROR1
	CMP #127        ; CONTROLLER ERROR
	BNE ERROR2
	LDA #CNTERR
	BNE JCDER2      ; JUMP
ERROR2
	STX JOBNUM
	TXA
	ASL A
	ASL A
	ASL A
	TAX
	LDA HDRS+2,X    ; RECALL TRACK,SECTOR
	STA TRACK
	LDA HDRS+3,X
	STA SECTOR
	PLA
	AND #$F         ; CONVERT CONTROLLER...
	BNE ERR1        ; ...ERRORS TO DOS ERRORS
	LDA #6          ; CODE = 16-->14
ERR1
	ORA #$20
	TAX
	DEX
	DEX
	TXA
	PHA
	LDA CMDNUM
	CMP #VAL
	BNE ERR2
	LDA #$FF
	STA CMDNUM
	PLA
	JSR ERRMSG
	JSR INITDR      ; INIT FOR VALIDATE
	JMP CMDER3
ERR2
	PLA
JCDER2
	JSR ERRMSG
CMDER3
	JSR CLRCB       ; CLEAR CMDBUF
	LDA #0
	STA ERWORD      ; CLEAR AFTER ERROR
	LDA PBD2        ; SET ERROR LED
	ORA #ERRLED
	STA PBD2
	JSR FREICH      ; FREE INTERNAL CHANNEL
	LDA #0          ; CLEAR POINTERS
	STA BUFTAB+CBPTR
	LDX #$FF
	TXS             ; PURGE STACK
	LDA ORGSA
	AND #$0F
	STA SA
	CMP #$F
	BEQ ERR10
	SEI
	LDA LSNACT
	BNE LSNERR
	LDA TLKACT
	BNE TLKERR
	LDX SA
	LDA LINTAB,X
	CMP #$FF
	BEQ ERR10
	AND #$0F
	STA LINDX
	JMP TLERR
;
; TALKER ERROR RECOVERY
; IF COMMAND CHANNEL, RELEASE DAV
; IF DATA CHANNEL, FORCE NOT READY
; AND RELEASE CHANNEL
;
TLKERR
	JSR FNDRCH
	LDA PAD2
	ORA #DAVO
	STA PAD2
	BNE TLERR       ; FINISH
;
; LISTENER ERROR RECOVERY
; IF COMMAND CHANNEL, RELEASE RFD
; IF DATA CHANNEL, FORCE NOT READY
; AND RELEASE CHANNEL
;
LSNERR
	JSR FNDWCH
	LDA #RFDO
	ORA PAD2
	AND #$FE
	STA PAD2
TLERR
	JSR TYPFIL
	CMP #RELTYP
	BCS ERR10
	JSR FRECHN
ERR10
	JMP IDLE
;
; CONVERT HEX TO BCD
;
HEXDEC
	TAX
	LDA #0
	PHP
	PHA
	SED
HEX0
	CPX #0
	BEQ HEX5
	CLC
	ADC #1
	BCC HEX1
	PLA
	ADC #0
	PHA
	LDA #0
HEX1
	DEX
	JMP HEX0
HEX5
	TAX
	PLA
	PLP
	ORA #0
	BEQ HEX2
	JSR BCD2
HEX2
	TXA
;
; CONVERT BCD TO ASCII DEC
; RETURN BCD IN .X
; STORE ASCII IN (TEMP),Y
;
BCDDEC	TAX
	LSR A
	LSR A
	LSR A
	LSR A
	JSR BCD2
	TXA
BCD2
	AND #$F
	ORA #$30
	STA (CB+2),Y
	INY
	RTS
;
; TRANSFER ERROR MESSAGE TO
; ERROR BUFFER
;
OKERR
	JSR ERROFF
	LDA #0
ERRTS0
	LDY #0
	STY TRACK
	STY SECTOR
JERRMS
	LDY #0
	LDX #<ERRBUF
	STX CB+2
	LDX #>ERRBUF
	STX CB+3
	JSR BCDDEC      ; CONVERT ERROR #
	LDA #',
	STA (CB+2),Y
	INY
	LDA ERRBUF
	STA CHNDAT+ERRCHN
	TXA             ; ERROR # IN .X
	LDX #0
	JSR ERMOVE      ; MOVE MESSAGE
ERMSG2
	LDA #',
	STA (CB+2),Y
	INY
	LDA TRACK
	JSR HEXDEC      ; CONVERT TRACK #
	LDA #',
	STA (CB+2),Y
	INY
	LDA SECTOR      ; CONVERT SECTOR #
	JSR HEXDEC
	LDA #',
	STA (CB+2),Y
	INY
	LDA DRVNUM
	AND #1
	ORA #$30
	STA (CB+2),Y    ; STORE DRIVE #
	TYA
	CLC
	ADC #<ERRBUF
	STA LSTCHR+ERRCHN ; SET LAST CHAR
	INC CB+2
	LDA #RDYTLK
	STA CHNRDY+ERRCHN
	RTS
.END
