.PAGE 'JOBS...SF'
;
; USE LASTJOB FOR DRIVE #
; CMD IS USED FOR JOB COMMAND
;
SETLJB
	LDA LSTJOB,X
	AND #1
	ORA CMD
;
; SET JOB UP AND CHECK T&S
;  .A=COMMAND FOR JOBS
;  .X=JOB NUMBER
;
SETJOB
	PHA
	STX JOBNUM
	TXA
;ASL A  ;4/12*****************
;ASL A
	ASL A
	TAX
	LDA HDRS+1,X    ;4/12***********
	STA CMD         ;SAVE SECTOR
	LDA HDRS,X      ;4/12***********
	BEQ TSERR
;
	CMP MAXTRK
	BCS TSERR       ;TRACK TOO LARGE
;
	TAX
	PLA             ;CHECK FOR WRITE
	PHA
	AND #$F0
	CMP #WRITE
	BNE SJB1        ;NOT WRITE,SKIP CHECK
	PLA
	PHA
	LSR A
	BCS SJB2        ;DRIVE 1
;
	LDA DSKVER      ;GET VERSION #
	BCC SJB3
SJB2
	LDA DSKVER+1    ;GET DRIVE 1 VER#
SJB3
	BEQ SJB4        ;NO # IS OK, TOO
	CMP VERNUM
	BNE VNERR       ;NOT SAME VERNUM #
;
SJB4
	TXA             ;RESTORE TRACK #
	JSR MAXSEC
	CMP CMD
	BEQ TSERR
	BCS SJB1        ;SECTOR IS OK!
;
;
; ILLEGAL TRACK AND SECTOR
;
TSERR
	JSR HED2TS
TSER1
	LDA #BADTS
	JMP CMDER2
;
;
HED2TS
	LDA JOBNUM
; ASL A ;4/12*************
; ASL A
	ASL A
	TAX
	LDA HDRS,X      ;4/12***********
	STA TRACK
	LDA HDRS+1,X    ;4/12***********
	STA SECTOR
	RTS
;
;
TSCHK
	LDA TRACK
	BEQ TSER1
	CMP MAXTRK
	BCS TSER1
;
	JSR MAXSEC
	CMP SECTOR
	BEQ TSER1
	BCC TSER1
	RTS
;
VNERR
	JSR HED2TS
	LDA #CBMV2      ;WRITE TO WRONG VERSION
	JMP CMDER2
;
SJB1
	LDX JOBNUM
	PLA
	STA CMD
	STA JOBS,X
	STA LSTJOB,X
	RTS
;
;
; DO JOB IN .A, SET UP ERROR COUNT
; AND LSTJOB. RETURN WHEN JOB DONE OK
; JMP TO ERROR IF ERROR RETURNS
;
DOREAD
	LDA #READ
	BNE DOJOB       ;BRA
DOWRIT
	LDA #WRITE
DOJOB
	ORA DRVNUM
	LDX JOBNUM
;
DOIT	STA CMD
DOIT2	LDA CMD
	JSR SETJOB
;      JMP WATJOB
;
; WAIT UNTIL JOB(.X) IS DONE
; RETURN WHEN DONE
;
WATJOB	JSR TSTJOB
	BCS WATJOB
	PHA             ;CLR JOBRTN FLAG
	LDA #0
	STA JOBRTN
	PLA
	RTS
;
;
;TEST IF JOB(.X) IS DONE YET
;IF NOT DONE RETURN
;IF OK THEN RETURN ELSE REDO IT
;
TSTJOB	LDA JOBS,X
	BMI NOTYET
	CMP #2
	BCC OK
;
	CMP #8          ;CHECK FOR WP SWITCH ON
	BEQ TJ10
;
	CMP #11         ;CHECK FOR ID MISMATCH
	BEQ TJ10
;
	CMP #$F         ;CHECK FOR NODRIVE
	BNE RECOV
TJ10	BIT JOBRTN
	BMI OK
	JMP QUIT2
;
OK	CLC             ;C=0 FINISHED OK OR QUIT
	RTS
;
NOTYET	SEC             ;C=1 NOT YET
	RTS
;
;
RECOV
	TYA             ;SAVE .Y
	PHA
	LDA DRVNUM      ;SAVE DRIVE #
	PHA
	LDA LSTJOB,X
	AND #1
	STA DRVNUM      ;SET ACTIVE DRIVE #
;
	TAY
	LDA LEDMSK,Y
	STA ERLED
;
	JSR DOREC
	CMP #2
	BCS REC01
	JMP REC95
REC01
;
	LDA LSTJOB,X    ;ORIGINAL JOB
	AND #$F0        ;MASK JOB CODE
	PHA             ;SAVE IT
	CMP #WRITE
	BNE REC0        ;NOT A WRITE
;
	LDA DRVNUM
	ORA #SECSEK     ;REPLACE W/ SECTOR SEEK...
	STA LSTJOB,X    ;... DURING RECOVERY
REC0
	BIT REVCNT
	BVS REC5        ;NO TRACK OFFSET
;
	LDA #0
	STA EPTR        ;CLR OFFSET TABLE PTR
	STA TOFF        ;CLR TOTAL OFFSET
REC1
	LDY EPTR
	LDA TOFF
	SEC
	SBC OFFSET,Y
	STA TOFF        ;KEEP TRACK OF ALL OFFSETS
	LDA OFFSET,Y
;
	JSR PTCH12      ; SET MICRO-STEPPING FLAG *ROM-05DS 01/21/85*
;	JSR HEDOFF
;
	INC EPTR        ;BUMP TABLE PTR
	JSR DOREC       ;DO THE RECOVERY
	CMP #2          ;ERROR CODE < 2?
	BCC REC3        ;JOB WORKED
;
	LDY EPTR
	LDA OFFSET,Y 
	BNE REC1        ;NULL INDICATES END
REC3
	LDA TOFF
;
	JSR PTCH13      ; CLR MICRO-STEPPING FLAG *ROM-05DS 01/21/85*
;	JSR HEDOFF
;
	LDA JOBS,X
	CMP #2
	BCC REC9        ;NO ERROR
REC5
	BIT REVCNT      ;CHECK BUMP-ON FLAG
	BPL REC7        ;NO BUMP
;
QUIT
	PLA
	CMP #WRITE      ;CHECK ORIGINAL JOB
	BNE QUIT2
;
	ORA DRVNUM
	STA LSTJOB,X    ;MUST RESTORE ORIGINAL
QUIT2
	LDA JOBS,X      ;.A= ERROR #
	JSR ERROR
REC7
	PLA
	BIT JOBRTN
	BMI REC95       ;RETURN JOB ERROR
	PHA
;
;DO THE BUMP
	LDA #BUMP
	ORA DRVNUM
	STA JOBS,X
REC8
	LDA JOBS,X
	BMI REC8        ;WAIT
;
	JSR DOREC       ;TRY ONE LAST SET
	CMP #2
	BCS QUIT        ;IT CLEARLY AIN'T GONNA WORK
REC9
	PLA             ;CHECK ORIGINAL JOB FOR WRITE
	CMP #WRITE
	BNE REC95       ;ORIGINAL JOB WORKED
;
	ORA DRVNUM
	STA LSTJOB,X    ;SET WRITE JOB BACK
	JSR DOREC       ;TRY LAST SET OF WRITES
	CMP #2          ;CHECK ERROR CODE
	BCS QUIT2       ;ERROR
REC95
	PLA
	STA DRVNUM      ;RESTORE DRIVE #
	PLA
	TAY             ;RESTORE .Y
	LDA JOBS,X
	CLC             ;OK!
	RTS
;
HEDOFF	;.A=OFFSET
	CMP #0
	BEQ HOF3        ;NO OFFSET
	BMI HOF2        ;STEPS ARE INWARD
HOF1
	LDY #1          ;STEP OUT 1 TRACK
	JSR MOVHED
	SEC
	SBC #1
	BNE HOF1        ;NOT FINISHED
	BEQ HOF3
HOF2
	LDY #$FF        ;STEP IN 1 TRACK
	JSR MOVHED
	CLC
	ADC #1
	BNE HOF2        ; NOT FINISHED
HOF3
	RTS
;
MOVHED
	PHA             ;SAVE .A
	TYA             ;PUT PHASE IN .A
	LDY DRVNUM
	STA PHASE,Y
MH10
	CMP PHASE,Y
	BEQ MH10        ;WAIT FOR CONTROLLER
;TO CHANGE IT
	LDA #0
	STA PHASE,Y     ;CLEAR IT OUT
	PLA             ;RESTORE
	RTS
;
;
DOREC	;DO LAST JOB RECOVERY
	LDA REVCNT      ;RE-TRY JOB REVCNT...
	AND #$3F        ;...# OF TIMES
	TAY
DOREC1
	LDA ERLED
	EOR LEDPRT
	STA LEDPRT
	LDA LSTJOB,X    ;SET LAST JOB
	STA JOBS,X
DOREC2
	LDA JOBS,X      ;WAIT
	BMI DOREC2
	CMP #2
	BCC DOREC3      ;IT WORKED
;
	DEY
	BNE DOREC1      ;KEEP TRYING
DOREC3
	PHA
	LDA ERLED       ;LEAVE DRIVE LED ON
	ORA LEDPRT
	STA LEDPRT
	PLA
	RTS             ;FINISHED
;
; SET HEADER OF ACTIVE BUFFER OF THE 
; CURRENT LINDX TO TRACK,SECTOR,ID
;
SETHDR	JSR GETACT
SETH
; ASL A ;4/12*****************
; ASL A
	ASL A
	TAY
	LDA TRACK
	STA HDRS,Y      ;4/12*********** ;SET TRACK
	LDA SECTOR
	STA HDRS+1,Y    ;4/12*********** ;SET SECTOR
	LDA DRVNUM      ;GET PROPER ID(DRVNUM)
	ASL A
	TAX
; LDA DSKID,X
; STA HDRS,Y    ;4/12***********
; LDA DSKID+1,X
; STA HDRS+1,Y  ;4/12***********
	RTS 
;
.END
