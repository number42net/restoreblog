.PAG 'FUNCS2 05/01/83'
SEQUEN
	JMP (ESCVEC)    ;ESCAPE INDIRECT
.SKIP 3
;******************************
;
;  INSERT LINE
;
;*****************************
;
ILINE
	JSR SCRDWN      ;INSERT A BLANK LINE
	JSR STU10       ;MOVE TO START OF LINE
	INX
	JSR GETBT1
	PHP
	JSR PUTBIT      ;SET CONTINUATION SAME AS IN PREVIOUS LINE
	PLP
	BCS LINRTS      ;SKIP IF WAS WRAPPED
	SEC
	ROR LSXP        ;SET FLAG - NEW LINE
LINRTS
	RTS
.SKI 3
;**************************
;
; DELETE LINE
;
;**************************
DLINE	JSR FISTRT      ;FIND START OF LINE
	LDA SCTOP       ;SAVE CURRENT OF WINDOW
	PHA
	LDA TBLX        ;MAKE 1ST DISPLAY LINE TOP OF WINDOW
	STA SCTOP
	LDA LOGSCR      ;MAKE SURE LOGICAL SCRL IS OFF
	PHA
	LDA #$80
	STA LOGSCR
	JSR SCRU15      ;SCROLL THE TOP LINE AWAY
	PLA
	STA LOGSCR
	LDA SCTOP       ;MAKE OLD 1ST LINE OF THIS 1 CURRENT
	STA TBLX
	PLA
	STA SCTOP
	SEC
	ROR LSXP        ;SET FLAG - NEW LINE
	JMP STU10       ;MAKE THIS LINE THE CURRENT ONE
.SKI 3
;******************************
;
; ERASE TO END OF LINE
;
;******************************
.SKI
ETOEOL	JSR SAVPOS
ETOL	JSR CLRPRT      ;BLANK REST OF LINE
	INC TBLX        ;MOVE TO NEXT LINE
	JSR STUPT
	LDY SCLF
	JSR GETBIT      ;CHECK IF NEXT IS WRAPPED LINE
	BCS ETOL        ;YES - BLANK NEXT LINE
ETOUT
	JMP DELOUT      ;EXIT AND RESTORE ORIGINAL POSITION
.SKI 3
;*****************************
;
; ERASE TO START OF LINE
;
;*****************************
.SKI
ETOSOL	JSR SAVPOS
ETSTOL	JSR DOBLNK      ;DO A BLANK
	CPY SCLF        ;DONE A LINE ?
	BNE ETS100      ;NO
	JSR GETBIT      ;AT TOP OF LINE
	BCC ETOUT       ;YES - EXIT
ETS100	JSR BAKCHR      ;BACK UP
	BCC ETSTOL      ;ALWAYS
.SKI 3
;*****************************
;
; SCROLL UP
;
;*****************************
;
SUUP	JSR SAVPOS
	TXA
	PHA
	JSR SCRUP
	PLA
	STA SEDT2
	JMP ETOUT       ;ALWAYS
.SKIP 3
;*****************************
;
; SCROLL DOWN
;
;*****************************
;
SDDN	JSR SAVPOS
	JSR GETBIT
	BCS SDDN2
	SEC
	ROR LSXP        ;SET FLAG - LEFT LINE
SDDN2
	LDA SCTOP
	STA TBLX        ;SCROLL FROM SCREEN TOP
	JSR SCRDWN
	JSR CLRBIT      ;MAKE FIRST LINE NON-CONTINUED
	JMP ETOUT       ;ALWAYS
.SKI
;
; SCROLLING ENABLE/DISABLE
;           CARRY SET = DISABLE
SCRSW0
	CLC             ;ENABLE SCROLLING
	.BYTE $24
SCRSW1
	SEC             ;DISABLE SCROLLING
SCRSW
	LDA #0
	ROR A
	STA SCRDIS
	RTS
.SKI
;
; LOGICAL SCROLL ENABLE/DISABLE
;              CARRY SET = ENABLE
LOGSW0
	CLC             ;DISABLE LOGICAL SCROLL (SINGLE LINE SCROLL)
	BCC LOGSW
LOGSW1
	SEC             ;ENABLE LOGICAL SCROLL (SCROLL A SET OF LINES)
LOGSW
	LDA #0
	ROR A
	STA LOGSCR
	RTS
.SKI 3
;******************************************
;
; PROGRAMMABLE KEY FUNCTIONS
;
;******************************************
;
KEYFUN
	SEI             ;PREVENT FIGHT OVER VARIABLES WITH KEYSCAN...
	DEY
	BMI LISTKY      ;DO LIST IF NO PARAMETERS GIVEN
	JMP ADDKEY      ;- ELSE GO ADD A NEW KEY DEFINITION
;
;   LIST KEY DEFINTIONS
;
LISTKY	LDY #0          ;INITIALIZE KEY COUNTER
;
LISTLP
	INY
	STY SEDT3
	DEY             ;MINUS 1 FOR INDEXING
	LDA KEYSIZ,Y    ;GET KEY LENGTH
	BEQ NODEFN      ;NO LISTING IF NO DEFINTION
	STA KEYIDX      ;SAVE KEY LENGTH
	JSR FINDKY      ;GET BUFFER START ADDR FOR FUNCTION KEY
	STA KEYPNT
	STX KEYPNT+1    ;SAVE 2 BYTE ADDRESS IN TEMP LOC
	LDX #3
;
PREAMB	LDA KEWORD,X    ;PRINT 'KEY ' PREAMBLE
	JSR BSOUT
	DEX
	BPL PREAMB
;
	LDX #$2F
	LDA SEDT3       ;GET KEY NUMBER
	SEC
KY2ASC	INX             ;CONVERT TO 1 OR 2 DIGIT ASCII
	SBC #10
	BCS KY2ASC
	ADC #$3A        ;ADD 10 & MAKE ASCII
	CPX #$30
	BEQ NOSEC       ;SKIP 2ND DIGIT PRINT
	PHA             ;SAVE FIRST DIGIT-10
	TXA
	JSR BSOUT       ;PRINT SECOND DIGIT
	PLA             ;RESTORE FIRST DIGIT-10
;
NOSEC
	JSR BSOUT       ;PRINT FIRST DIGIT
	LDY #0          ;INIT STRING POSITION COUNTER
	LDA #',         ;FOR COMMA PRINT
LSTK20	JSR BSOUT       ;PRINT CHAR - COMMA OR PLUS-SIGN
	LDX #7          ;FOR CHR$ PRINTING - NO PLUS-SIGN OR QUOTE TO PRECEED
TXTPRT
	JSR PAGST2      ;MAKE SURE FUNCTION KEY RAM PAGE
	LDA (KEYPNT),Y  ;GET BYTE
	JSR PAGRES
	CMP #13
	BEQ LSTKCR      ;PRINT CHR$(13) FOR RETURN
	CMP #141
	BEQ LSTKSC      ;PRINT CHR$(141) FOR RETURN
	CMP #34
	BEQ LSTKQT      ;PRINT CHR$(34) FOR QUOTE
	CPX #9          ;WAS A NORMAL CHAR PRINTED LAST TIME
	BEQ LSTK10      ;YES - SKIP AHEAD
	PHA             ;SAVE CHAR
	LDA #'"
	JSR BSOUT       ;PRINT A QUOTE
	PLA             ;RESTORE THE CHAR
;
LSTK10	JSR BSOUT       ;PRINT THE CHAR
	LDX #9          ;FOR CHR$ - PRINT QUOTE AND PLUS NEXT TIME
	INY
	CPY KEYIDX
	BNE TXTPRT      ;LOOP TO END OF STRING
;
	LDA #'"
	JSR BSOUT       ;PRINT ENDING QUOTE
;
LSTK30
	LDA #$0D
	JSR BSOUT       ;DO A RETURN
NODEFN
	LDY SEDT3       ;GET KEY NUMBER
	CPY #PGMKYS
	BNE LISTLP      ;LOOP TIL ALL KEYS CHECKED
	CLI             ;ALL DONE...CLEAR THE KEYSCAN HOLDOFF
	CLC             ;OKAY RETURN ALWAYS
	RTS
;
LSTKCR	LDX #QTWORD-CDWORD-1 ;INDEX FOR RETURN
	.BYT $2C        ;SKIP 2
LSTKSC	LDX #ADDKEY-CDWORD-1 ;INDEX FOR SHIFTED-RETURN
	.BYT $2C        ;SKIP 2
LSTKQT	LDX #SCWORD-CDWORD-1 ;INDEX FOR QUOTE
;
LSTK	TXA             ;SAVE VALUE INDEX....
	PHA             ;SAVE .X
	LDX #CRWORD-CDWORD-1 ;PRINT CHR$(
LSTKLP	LDA CDWORD,X    ;PRINT LOOP
	BEQ LSTK40      ;ZERO IS END...
	JSR BSOUT       ;
	DEX
	BPL LSTKLP
	PLA             ;MOVE NUMBER AND REPEAT
	TAX
	BNE LSTKLP
;
LSTK40	INY
	CPY KEYIDX
	BEQ LSTK30      ;EXIT IF ALL STRING PRINTED
	LDA #'+         ;SET TO PRINT PLUS SIGN
	BNE LSTK20      ;RETURN TO ROUTINE
;
;
KEWORD	.BYTE ' YEK'
CDWORD	.BYTE '($RHC+"'
CRWORD	.BYTE 0,')31'
QTWORD	.BYTE 0,')43'
SCWORD	.BYTE 0,')141'
.SKI 3
;
;   INSERT A NEW KEY DEFINTION
;
ADDKEY
	PHA             ;SAVE ZERO PAGE ADDRESS OF PARAMS
	TAX
	STY SEDT1       ;SAVE KEY NUMBER IN TEMP LOC
	LDA $0,X        ;GET NEW STRING LENGTH
	SEC
	SBC KEYSIZ,Y    ;SUBTRACT OLD LENGTH
	STA SEDT2       ;SAVE DIFFERENCE IN TEMP LOCATION
	ROR FKTMP       ;SAVE THE CARRY
	INY
	JSR FINDKY      ;FIND START ADDR OF NEXT FUNCTION KEY
	STA SEDSAL
	STX SEDSAL+1    ;SAVE 2 BYTE ADDRESS IN TEMP LOC
	LDY #PGMKYS
	JSR FINDKY      ;FIND END OF LAST FUNCTION KEY
	STA SEDEAL
	STX SEDEAL+1    ;SAVE NEXT FREE BYTE ADDR IN TEMP LOC
	LDY FKTMP       ;CHECK IF NEW STRING IS LONGER OR SHORTER
	BPL KEYSHO      ;SKIP AHEAD IF SHORTER
	CLC
	SBC PKYEND      ;SUBTRACT LAST AVAILABLE ADRESS
	TAY
	TXA
	SBC PKYEND+1
	TAX
	TYA
	CLC
	ADC SEDT2       ;ADD DIFFERENCE
	TXA
	ADC #0
	BCS KYXIT       ;SKIP IF MEMORY NOT FULL
;
; EXPAND OR CONTRACT KEY AREA TO MAKE ROOM FOR NEW
;   KEY DEFINITION.
;
KEYSHO
	JSR PAGST2      ;SET UP FUNCTION KEY RAM PAGE
KYMOVE
	LDA SEDEAL
	CLC             ;CHECK IF ENTIRE AREA EXPANDED OR CONTRACTED
	SBC SEDSAL
	LDA SEDEAL+1
	SBC SEDSAL+1
	BCC KEYINS      ;GO INSERT NEW KEY DEFINTION IF YES
	LDY #0
	LDA FKTMP       ;CHECK IF EXPAND OR CONTRACT
	BPL KSHORT      ;SKIP IF NEEDS TO BE CONTRACTED
	LDA SEDEAL
	BNE NEWKY4      ;DEC 1 FROM SOURCE ADDR
	DEC SEDEAL+1    ;SUB 1 FOR BORROW
NEWKY4
	DEC SEDEAL
	LDA (SEDEAL),Y  ;MOVE 1 BYTE UP TO EXPAND
	LDY SEDT2       ;GET OFFSET = DIFFERENCE
	STA (SEDEAL),Y  ;MOVE BYTE UP
	JMP KYMOVE      ;LOOP UNTIL ALL BYTES MOVED
KSHORT
	LDA (SEDSAL),Y  ;GET SOURCE BYTE
	LDY SEDT2       ;GET OFFSET = DIFFERENCE
	DEC SEDSAL+1    ;SUB 1 TO MOVE DOWN
	STA (SEDSAL),Y  ;MOVE THE BYTE DOWN
	INC SEDSAL+1
	INC SEDSAL      ;MOVE SOURCE UP 1 BYTE
	BNE KYMOVE
	INC SEDSAL+1    ;ADD 1 FOR CARRY
	BNE KYMOVE      ;ALWAYS
;
;  INSERT THE NEW STRING DEFINTION
;
KEYINS
	LDY SEDT1       ;GET THE KEY INDEX
	JSR FINDKY      ;FIND BUFFER START ADDRESS FOR THIS KEY
	STA SEDSAL
	STX SEDSAL+1    ;SAVE 2 BYTE ADDRESS IN TEMP LOC
	LDY SEDT1
	PLA
	PHA
	TAX             ;GET ZERO PAGE ADDR OF PARAMS
	LDA $0,X
	STA KEYSIZ,Y    ;SAVE KEY LENGTH
	TAY
	BEQ KYINOK      ;EQUAL TO ZERO NO KEYS...EXIT
	LDA $1,X        ;GET & SAVE LOW BYTE OF STRING ADDRESS
	STA SEDEAL
	LDA $2,X        ;GET & SAVE HIGH BYTE OF STRING ADDRESS
	STA SEDEAL+1
KYINLP
	DEY
	LDA $3,X        ;GET STRING RAM PAGE
	STA I6509
	LDA (SEDEAL),Y  ;GET BYTE
	JSR PAGRES      ;RESTORE ORIGINAL RAM PAGE
	JSR PAGST2      ;SET UP FUNCTION KEY RAM PAGE
	STA (SEDSAL),Y  ;STORE INTO BUFFER
	TYA             ;.Y FLAGS...END?
	BNE KYINLP      ;NO... LOOP
KYINOK
	JSR PAGRES
	CLC             ;FOR GOOD EXIT CARRY CLEAR
KYXIT	PLA             ;POP ZERO PAGE ADDRESS FOR PARAMS
	CLI             ;ALL DONE...RELEASE KEYSCAN
	RTS             ; C-SET IS MEMORY FULL ERROR
.END
