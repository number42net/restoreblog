	.PAGE 'MANII4 11/03/80'
; ****** CONSTANTS ******
;
CR	= $0D ;ASCII RETURN CODE
SPERR	= $10 ;TAPE ERROR
LLEN	= 40 ;40 COLUMNS
WLKNUM	= 59 ;WALK CLOCK COUNT
	.SKIP 3
; ****** Z-PAGE VARABLES ******
;
MEMSIZ	= $34 ;TOP OF MEMORY FOR BASIC
CINV	= $90 ;INDIRECT VECTOR FOR IRQ
CBINV	= $92 ;BRK RAM VECTOR
NMINV	= $94 ;NMI RAM VECTOR
SATUS	= $96 ;I/O OPERATION STATUS BYTE
LSTX	= $97 ;LAST KEY INDEX
STKEY	= $9B ;STOP KEY FLAG
VERCK	= $9D ;LOAD OR VERIFY FLAG
NDX	= $9E ;# CHARS IN KEYBUFFER
BLNSW	= $A7 ;BLINK CURSOR SWITCH
BLNCT	= $A8 ;CURSOR BLINK CTR
GDBLN	= $A9 ;BEFORE BLINK CHAR
BLNON	= $AA ;CHAR IS REVERSE FLAG
DFLTN	= $AF ;DEFAULT INPUT DEVICE #
DFLTO	= $B0 ;DEFAULT OUTPUT DEVICE #
PNT	= $C4 ;LINE ADDRESS OF CURSOR
PNTR	= $C6 ;COLUMN OF CURSOR
SAL	= $C7 ;POINTER USED IN SCROLL DOWN
FNLEN	= $D1 ;LENGTH OF CURRENT FILE NAME
FA	= $D4 ;IEEE-488 FIRST ADDRESS
TBLX	= $D8 ;ACTIVE CURSOR LINE
FNADR	= $DA ;OFFSET FOR NEW LOCATER
TMP0	= $FB ;INDIRECT 1
TMP2	= $FD ;INDIRECT 2
	.SKIP 3
	*=$027A ;USE CASS #1 BUFFER FOR VARABLES
PCH	*=*+1
PCL	*=*+1
FLGS	*=*+1
ACC	*=*+1
XR	*=*+1
YR	*=*+1
SP	*=*+1
INVH	*=*+1
INVL	*=*+1
SAVLS	*=*+1 ;SAVE OF LAST KEY INDEX
DELAY	*=*+1 ;DELAY BEFORE REPEATS
REPDY	*=*+1 ;DELAY BETWEEN REPEATS
WSW	*=*+1 ;FLAG FOR QUICK TRACE
SAVCMD	*=*+1 ;LAST COMMAND LETTER
SAVX	*=*+1 ;PLACE TO SAVE X
TMPC	*=*+1
TMPC2	*=*+1
LENGTH	*=*+1 ;DIS INSTR LENGTH
PTCH	*=*+1 ;TEMP FOR DISA
MSAL	*=*+2
EAL	*=*+2
DIFF	*=*+1
TMP10	*=*+2
WRAP	*=*+1 ;WRAP FFFF FLAG
TMPC4	*=*+1
FORMAT	*=*+1
BAD	*=*+1
BRKADR	*=*+2 ;STOP ADR FOR QUICK TRACE
BRKCNT	*=*+2 ;# OCCURENCES
TMP12	*=*+2 ;OCCURENCE CTR FOR QUICK
KEYS	*=*+2 ;SAVED KEYBOARD IRQ VECTOR
NEWLC	*=*+2 ;OFFSET FOR NEW LOCATER
RBUSY	*=*+1 ;ROLL BUSY FLAG
MTCH	*=*+64 ;64 CHAR MATCH BUFFER
	.SKIP 2
KEYD	= $026F ;KEYBOAD INPUT BUF
BEGIN	= $1000 ;START EXTRAMON HERE
	.SKIP 3
; ****** ROM ROUTINES ******
	.SKIP 3
LD15B2	= $F322 ;LEVEL 2 MONITOR LOAD ENTRY
LD15B4	= $F356 ;LEVEL 4 MONITOR LOAD ENTRY
SV5B2	= $F6A4 ;LEVEL 2 MONITOR SAVE ENTRY
SV5B4	= $F6E3 ;LEVEL 4 MONITOR SAVE ENTRY
CLRCH	= $FFCC ;CLEAR CHANNEL
BASIN	= $FFCF ;INPUT A CHAR
GETIN	= $FFE4 ;GET A CHAR
BSOUT	= $FFD2 ;OUTPUT A CHAR
	.SKIP 3
; ****** INPUT/OUTPUT ******
	*=$9110 ;DEVICE1 6522 (PAGE2 NMI)
D1ORB	*=*+1
D1ORAH	*=*+1
D1DDRB	*=*+1
D1DDRA	*=*+1
D1T1L	*=*+1
D1T1H	*=*+1
D1T1LL	*=*+1
D1T1LH	*=*+1
D1D2L	*=*+1
D1T2H	*=*+1
D1SR	*=*+1
D1ACR	*=*+1
D1PCR	*=*+1
D1IFR	*=*+1
D1IER	*=*+1
D1ORA	*=*+1
.SKI2
	*=$9120 ;DEVICE2 6522 (PAGE3 IRQ)
COLM	;KEYBOARD MATRIX
D2ORB	*=*+1
ROWS	;KEYBOARD MATRIX
D2ORAH	*=*+1
D2DDRB	*=*+1
D2DDRA	*=*+1
D2T1L	*=*+1
D2T1H	*=*+1
D2T1LL	*=*+1
D2T1LH	*=*+1
D2T2L	*=*+1
D2T2H	*=*+1
D2SR	*=*+1
D2ACR	*=*+1
D2PCR	*=*+1
D2IFR	*=*+1
D2IER	*=*+1
D2ORA	*=*+1
	.SKIP 4
	*= BEGIN
COLDS	JMP INIT ;COLD START MONITOR
WARMS	JMP BRKE ;WARM START MONITOR
	.SKIP 3
RDT	JMP BASIN ;ALL INPUT THRU HERE
WRT	JMP BSOUT ;ALL OUTPUT THRU HERE
	.SKIP 3
; INSTALL EXTRA MONITOR COMMANDS
;
INIT	SEI ;STOP IRQ'S
	LDA WWLK ;INIT NEW BRK VECTOR
	LDX WWLK+1
	STA CBINV
	STX CBINV+1
	LDA CINV ;GET OLD IRQ VECTOR
	LDX CINV+1
	CMP WINTR ;CHANGED ALREADY ?
	BNE INIT10 ;NO - GO CHANGE
	CPX WINTR+1
	BEQ INIT20 ;YES - LEAVE BE
INIT10	STA KEYS
	STX KEYS+1
	LDA WINTR ;INSTALL REPEAT KEYS
	LDX WINTR+1
	STA CINV
	STX CINV+1
INIT20
	LDA WCOLDS
	LDX WCOLDS+1
	CPX #$80 ;IN ROM ABOVE SCREEN ?
	BCS INIT30
	STA MEMSIZ
	STX MEMSIZ+1
INIT30	LDA #$10 ;SET DELAYS FOR REPEAT
	STA DELAY
	STA REPDY
	LDA #0
	STA WSW ;DO A BREAK
	STA RBUSY ;NOT BUSY
	CLI ;ALLOW IRQ'S
	BRK
	.SKIP 4
BRKE
	SEC
	LDA PCL ;BACK UP ONE BYTE
	SBC #1
	STA PCL
	LDA PCH
	SBC #0
	STA PCH
B5	JSR CRLF
	LDX #'B  ;SET X EQUAL TO B
B567	LDA #'*
	JSR WRTWO
	LDA #'R ;SET FOR R DISPLAY TO
;                      PERMIT IMMEDIATE
;                      ALTER FOLLOWING
;                      BREAKPOINT
	BNE NWCMD ;ALWAYS
ERROPR	LDA #$3F ;PRINT A "?" FOR AN ERROR
	JSR WRT
STRT
	JSR CRLF
STRT10	LDA #'. ;TYPE A PROMPTING '.'
	JSR WRT
	LDA #0 ;ZERO WRAP FLAG
	STA WRAP
	STA RBUSY ;NOT BUST NOW
	LDX #$FF ;RESET THE STACK
	TXS
ST1	JSR RDOC ;READ COMMAND. CHARACTER
;                      IS RETURNED IN A
	CMP #'. ;IGNORE PROMPTING '.'
	BEQ ST1
	CMP #$20 ;IGNORE SPACES
	BEQ ST1
	.SKIP 3
; SEARCH FOR COMMANDS
;
NWCMD	LDX #NCMDS-1
NW10	CMP CMDS,X
	BNE NW20
	STA SAVCMD
	TXA ;MULT BY TWO
	ASL A
	TAX ;INDEX INTO DISPATCH TABLE
	.SKIP 3
; DISPATCH TO COMMAND
;
	LDA ADRS,X ;FAKE INDEXED JMP
	STA TMP0
	LDA ADRS+1,X ;PUSH ADR-1 AND RTS
	STA TMP0+1
	JMP (TMP0)
;
NW20	DEX
	BPL NW10
	BMI ERROPR ;CMD NOT FOUND ERROR
	.SKIP 3
; DEC TMP0 OR TMP2
;
DECT2	LDX #2 ;DEC TMP2 WORD
	BNE DEC30 ;ALWAYS
DECT0	LDX #0 ;DEC TMP0 WORD
DEC30	LDY TMP0,X ;A BORROW?
	BNE DEC20 ;NO-SKIP
	LDY TMP0+1,X ;A MEMORY WRAP
	BNE DEC10 ;NO-SKIP
	INC WRAP ;YES-SET FLAG
DEC10	DEC TMP0+1,X
DEC20	DEC TMP0,X
DRTS	RTS
	.SKIP 3
;DISASSEMBLE ONE LINE PRINT 9 SPACES
;
DISSPC	LDA #0 ;PRINT ALL CHARS
	STA PTCH
	JSR DIS300 ;DIS. ONE
	LDX #9 ;SET FOR 9 SPACES
	.SKIP 3
;PRINT # OF SPACES=X
;
SPCX	JSR SPACE
	DEX
	BNE SPCX
	RTS
	.SKIP 3
; EXCHANGE TMP REGISTERS
;
T0T10	LDX #2 ;EXCHANGE TMP0 WITH
T0T100	LDA TMP0-1,X ; TMP10
	PHA
	LDA TMP10-1,X
	STA TMP0-1,X
	PLA
	STA TMP10-1,X
	DEX
	BNE T0T100
	RTS
	.SKIP 3
; DOUBLE SUBTRACT
; DIFF=LO DIFFERENCE
; Y=HI DIFFERENCE
; A=0 IF ZERO DIFFERENCE
;
DCT10	LDA TMP10 ;TMP10-TMP0
	LDY TMP10+1
	JMP DC10 ;SKIP OVER
DCMP	LDA TMP2 ;TMP2-TMP0
	LDY TMP2+1
DC10	SEC
	SBC TMP0
	STA DIFF
	TYA ;HI BYTE IN Y
	SBC TMP0+1
	TAY ;SAVE HI RESULT IN Y
	ORA DIFF ;OR LO FOR EQUAL TEST
	RTS
	.SKIP 5
	.END
