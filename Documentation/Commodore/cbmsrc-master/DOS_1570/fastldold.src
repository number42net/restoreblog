        .page  
	.subttl 'fastld.src'

fstload jsr  spout	 ; output
	lda  fastsr	 ; set flag
	ora  #1
	sta  fastsr	
	jsr  set_fil	 ; setup filename for parser
	bcs  9$

	lda  cmdbuf
	cmp  #'*	 ; load last ?
	bne  7$
	
	lda  prgtrk	 ; any file ?
	bne  1$

7$	lda  #0          
	tay
	tax		 ; clear .x, .y
        sta  lstdrv      ; init drive number
	sta  filtbl	 ; set up for file name parser
        jsr  autoi	 ; init mechanism
	lda  nodrv	 ; chk status
	bne  9$		 ; no drive status

        jsr  onedrv      ; select drive
	lda  f2cnt
	pha	
	lda  #1
	sta  f2cnt
	lda  #$ff
	sta  r0		 ; set flag
	jsr  lookup	 ; locate file
	pla		 
	sta  f2cnt	 ; restore var
	bit  switch	 ; seq flag set ?
	bmi  8$

 	lda  pattyp	 ; is it a program file ?
	cmp  #2
	bne  6$		 ; not prg

8$      lda  filtrk      ; check if found. err if not
        bne  1$		 ; br, file found

6$    	ldx  #%00000010	 ; file not found
	.byte skip2
9$	ldx  #%00001111	 ; no drive
        jmp  fld_err

1$      sta  prgtrk	 ; save for next
	pha		 ; save trk
	lda  #prgtyp	 ; program type
	jsr  opntyp	 ; ========> open a internal channel <========
	lda  #0
	sta  dirbuf	 ; even page boundary
	txa
	sta  channel	 ; save channel off
	lsr  a		 ; a/2
	sta  jobnum	 ; save job #
	pla		 ; restore track
	sta  hdrs,x	 ; setup track
        lda  filsec      ; & sector
	sta  prgsec	 ; for next time
        sta  hdrs+1,x

	lda  #read	 ; read job
	sta  cmdbuf+2	 ; save read cmd
	sta  ctl_cmd	

2$	cli		 ; let controller run
	ldx  jobnum	 ; get job #
	lda  ctl_cmd	 ; get cmd
	sta  jobs,x	 ; send cmd
	jsr  stbctr	 ; whack the controller in the head
	cpx  #2		 ; error ?
	bcc  5$
	
	jmp  fld_err

5$	sei
	ldy  #0
	lda  (dirbuf),y	 ; check status
	beq  end_of_file	

	lda  fastsr	 ; clear flag
	and  #$fe
	sta  fastsr

	stx  ctl_dat	 ; .x = send status
	jsr  hskrd

	ldy  #2
3$	lda  (dirbuf),y
	sta  ctl_dat	 ; save data
	jsr  hskrd	 ; send data to the host
	iny
	bne  3$

	ldx  channel	 ; jobnum * 2
	lda  (dirbuf),y  ; .y = 0
	cmp  hdrs,x	 ; same as previous track ?
	beq  4$

	ldy  #read
	.byte skip2
4$	ldy  #fread	 ; fast read
	sty  ctl_cmd	 ; command to seek then read
	sta  hdrs,x	 ; next track
	ldy  #1		 ; sector entry
	lda  (dirbuf),y	
	sta  hdrs+1,x	 ; next sector	
	jmp  2$

end_of_file
	ldx  #$1f	 ; eof
	stx  ctl_dat	 ; send status
	jsr  hskrd

	lda  #1
	bit  fastsr	 ; first time through ?
	beq  1$	         ; br, nope

	ldy  #1
	lda  (dirbuf),y	 ; number of bytes
	sec
	sbc  #3
	sta  ctl_dat	 ; send it
	pha		 ; save it
	jsr  hskrd

	iny		 ; next
	lda  (dirbuf),y	 ; address low
	sta  ctl_dat	 ; send status
	jsr  hskrd

	iny
	lda  (dirbuf),y	 ; address high
	sta  ctl_dat	 ; send status
	jsr  hskrd
	pla
	tax		 ; # of bytes
	ldy  #4		 ; skip addresses
	bne  3$		 ; bra

1$      ldy  #1
	lda  (dirbuf),y	 ; number of bytes
	tax
	dex
	stx  ctl_dat	 ; send it
	jsr  hskrd
	ldy  #2		 ; start at data
	
3$	lda  (dirbuf),y
	sta  ctl_dat	 ; save data
	jsr  hskrd	 ; send data to the host
	iny
	dex
	bne  3$
	
	jsr  freich	 ; free internal channel
	
	jmp  endcmd

fld_err	stx  ctl_dat	 
	jsr  hskrd	 ; send error
	jsr  freich	 ; free internal channel
	ldx  channel	 ; get hdr offset
	lda  hdrs,x	 ; get track
	sta  track	 ; error routine needs track 
	lda  hdrs+1,x	 ; get sector
	sta  sector	 ; it also needs the sector
	lda  ctl_dat	 ; get error
	cmp  #2
	bne  1$

	lda  #flntfd	 ; file not found
	jmp  cmderr	 ; never more...

1$	ldx  jobnum	 ; get job #
	jmp  error	 ; error out.....	

; *************************************
; ***** FAST LOAD FILENAME PARSER *****
; *************************************

set_fil ldy  #3		 ; default .y
	lda  cmdsiz	 ; delete burst load command
	sec
	sbc  #3
	sta  cmdsiz	 ; new command size

	lda  cmdbuf+4    ; drv # given ?
	cmp  #':
	bne  1$

	lda  cmdbuf+3
	tax		 ; save 
	and  #'0
	cmp  #'0         ; 0:file ?
	bne  1$

	cpx  #'1	 ; chk for error
	beq  4$			

	cpx  #'0	 ; chk for h:jsjsj ... etc
	bne  1$			

	dec  cmdsiz	 ; adjust ...
	iny
	dec  cmdsiz
	iny

1$	lda  cmdbuf+3    ; drv # given ?
	cmp  #':
	bne  2$

	dec  cmdsiz
	iny

2$	ldx  #0		 ; start at cmdbuf+0
3$      lda  cmdbuf,y	 ; extract file-name
	sta  cmdbuf,x
	iny
	inx
	cpx  cmdsiz	 ; done ?
	bne  3$		 ; delete cmd from buffer

	clc
	.byte skip1
4$	sec		 ; error
	rts
