	.page 
	.subttl 'var.src'

*=0              

jobs     *=*+6          ; job que

; controller job types

	read     =$80    
	fread    =read+8    
	write    =$90    
	wverfy   =$a0    
	seek     =$b0    
	secsek   =seek+8         
	bump     =$c0    
	jumpc    =$d0    
	exec     =$e0    
	frmt     =$f0    

;job returns

	;01 = ok
	;02 = can't find sector
	;03 = no sync
	;04 = not a data block
	;05 = data block checksum
	;06 = format error
	;07 = verify error
	;08 = write protect error
	;09 = header block checksum
	;10 = data extends into next block
	;11 = disk id mismatch

hdrs     *=*+12         ; job headers
dskid    *=*+4          ; master copy of disk id

header   *=*+5          ; image of last header

info			; **** 1571 ****
fmhdpt			; **** 1571 ****
actjob   *=*+1          ; controller's active job
wpsw     *=*+2          ; write protect change flag
lwpt     *=*+2          ; last state of wp switch
drvst    *=*+2   
			;$10 = time out state
			;$20 = motor just running
			;$40 = stepping
			;$80 = accelerating
			;$00 = no drive active

drvtrk   *=*+1		; current track
	 *=*+1		; slowd flag

mfmhdr			; **** 1571 ****
stab     *=*+10          

;    pointers

savpnt   *=*+2   
bufpnt   *=*+2   
hdrpnt   *=*+2   

gcrpnt   *=*+1   

acltim2			;  **** 1571 ****
gcrerr   *=*+1          ;  indicates gcr decode error
bytcnt   *=*+1   

fastsr			;  **** 1571 ****
bitcnt   *=*+1   
bid      *=*+1   
hbid     *=*+1   
chksum   *=*+1   

tsttrk			;  **** 1571 ****
switch			;  **** 1571 ****
hinib    *=*+1   

cpmit			;  **** 1571 ****
byte     *=*+1   
drive    *=*+1   
cdrive   *=*+1   
jobn     *=*+1   
tracc    *=*+1   
nxtjob   *=*+1   
nxtrk    *=*+1   
sectr    *=*+1   

mfmsiz_hi		;  **** 1571 ****
work     *=*+1   
job      *=*+1   

ctl_dat			;  **** 1571 ****
ctrack   *=*+1   
dbid     *=*+1          ;  data block id
acltim   *=*+1          ;  acel time delay
savsp    *=*+1          ;  save stack pointer
steps    *=*+1          ;  steps to desired track
tmp      *=*+1   
csect    *=*+1   
nexts    *=*+1   
nxtbf    *=*+1          ;  pointer at next gcr source buffer
nxtpnt   *=*+1          ;  and next gcr byte location in buffer
gcrflg   *=*+1          ;  buffer in gcr image
ftnum    *=*+1          ;  current format track
btab     *=*+4   
gtab     *=*+8   

dkmode			;  **** 1571 ****
as       *=*+1          ;  # of steps to acel

ctl_cmd			;  **** 1571 ****
af       *=*+1          ;  acel. factor

minsek			;  **** 1571 ****
aclstp   *=*+1          ;  steps to go

maxsek 			;  **** 1571 ****
rsteps   *=*+1          ;  # of run steps
nxtst    *=*+2		;  1541 pointer

cur_trk			;  **** 1571 ****
minstp   *=*+1          ;  min reqired to acel


;  constants

ovrbuf   =$0100         ;  top of stack
numjob   =6     	;  number of jobs
jmpc     =$50   	;  jump command
bumpc    =$40   	;  bump command
execd    =$60   	;  execute command
bufs     =$0300         ;  start of buffers
buff0    =bufs   
buff1    =bufs+$100      
buff2    =bufs+$200      
tolong   =$2    	;  format errors
tomany   =$3     
tobig    =$4     
tosmal   =$5     
notfnd   =$6     
skip1    =$24		;  bit zp
skip2    =$2c   	;  bit abs
toprd    =69    	;  top of read overflo buffer on a read
topwrt   =69    	;  top of write overflo buffer on a write
numsyn   =5   		;  gcr byte count for size of sync area
gap1     =11          	;  gap after header to  clear erase in gcr bytes
gap2     =4 		;  gap after block min size
rdmax    =6   		;  sector distance wait
wrtmin   =4    
wrtmax   =8
tim      =32    	;  irq rate for 8 ms @ 1 Mhz
tim2	 =64            ;  irq rate for 8 ms @ 2 Mhz
byt_clr  =$1C00
mscnt    =255
        .page  

;******************************
;*  equates
;******************************
	
zp2      =*     	; save zero page for dos
bit0	  = 1
bit1	  = 2
bit2	  = 4
bit3	  = 8
bit4	  = 16
bit5	  = 32
bit6	  = 64
bit7	  = 128
all	  = 255
rom      =$c000         ; first rom address

lrf      =$80   	; last record flag
dyfile   =$40   	; dirty flag for rr file
ovrflo   =$20   	; rr print overflow
nssl     =6     	; # of side-sector links
ssioff   =4+nssl+nssl   ; offset into ss for data block ptrs
nssp     =120   	; # of ptrs in ss
mxchns   =6     	; max # channels in system
maxsa    =18    	; max sa # +1
vererr   =7     	; controller verify error
cr       =$0d   	; carriage return
bfcnt    =5     	; available  buffer count
cbptr    =bfcnt+bfcnt   ; command buffer ptr
errchn   =mxchns-1      ; error channel #
errsa    =16    	; error channel sa #
cmdchn   =mxchns-2      ; command channel #
lxint    =%00001111     ; power up linuse (logical index usage
blindx   =6     	; bam lindx for floating bams
cmdsa    =15    	; command channel sa #
apmode   =2     	; open append mode
mdmode   =3     	; open modify mode
rdmode   =0     	; open read mode
wtmode   =1     	; open write mode
reltyp   =4     	; open relative type
dirtyp   =7     	; open direct type
seqtyp   =1     	; open sequential type
prgtyp   =2     	; open program type
usrtyp   =3     	; open user type
typmsk   =7     	; mask for type bits
irsa     =17    	; internal read sa #
iwsa     =18    	; internal write sa #
dosver   =2     	; dos version
fm2030   =$42   	; 2030 format version
fm4040   =$41   	; 4040 format version
mxfils   =5     	; max # filenames in string
dirlen   =24    	; directory length used
nbsiz    =27    	; nambuf text size
cmdlen   =41    	; length of command buffer
drvmsk   =1		; drv 0 or 1
        .page  

;*****************************
;*      i/o definitions      *
;*****************************
;
unlsn    =$3f   	; ieee unlisten command
untlk    =$5f   	; ieee untalk command
notrdy   =$0    	; not ready
talker   =$80   	; ieee talker flag
lisner   =1     	; ieee listener flag
eoiout   =$80   	; talk with eoi
eoisnd   =$08   	; not(eoi) to send
eoi      =$08   	; not(eoi) to send
rdytlk   =$88   	; talk no eoi
rdylst   =$1    	; ready to listen
rndrdy   =rdytlk+rdylst ; random chnrdy
rndeoi   =eoiout+rdylst ; random w/ eoi
        
;*******************************************************************
;i/o registers

; mos 6522-a

        *  =$1800        
;serial ieee control port

pb       *=*+1          ; serial port
	                ; bit 0: data in
			; bit 1: data out
			; bit 2: clk in
			; bit 3: clk out
			; bit 4: atn ack
			; bit 5: dev jumper
			; bit 6: dev jumper
			; bit 7: atn in		
pa1      *=*+1          

ddrb1    *=*+1          ; serial data dir
ddra1    *=*+1          ; unused ddra
t1lc1    *=*+1          ; timer 1 low counter
t1hc1    *=*+1          ; timer 1 hi counter
t1ll1    *=*+1          ; timer 1 low latch
t1hl1    *=*+1          ; timer 1 hi latch
t2lc1    *=*+1          ; timer 2 low counter
t2hc1    *=*+1          ; timer 2 hi counter
sr1      *=*+1          ; shift reg
acr1     *=*+1          ; aux control reg
pcr1     *=*+1          
ifr1     *=*+1          
ier1     *=*+1          
pota1    *=*+1          ; bit 0: track 0 sense, 1=trk0
			; bit 1: fast serial direction, 1=out
			; bit 2: side select, 1=side 1
			; bit 3: ------------
			; bit 4: ------------
			; bit 5: 1/2 Mhz, 1=2 Mhz
			; bit 6: atn out
			; bit 7: byte ready, 0=byte		

;*******************************************************************

;  bits for serial handshake

datin    =$1    	; data in line
datout   =$2    	; data out
clkin    =$4    	; clock in
clkout   =$8    	; clock out
atna     =$10   	; atna ack
atn      =$80   	; atn in

led0     =8     	; act led
led1     =0     	; no led
ledprt   =$1c00    	; on  pb  of  $1c00        
ledout   =$1c02    	; ddrb  of  $1c00  for  output-led         

;*******************************************************************

*=$2000          
; western digital floppy disk cntrl

; ******* BEWARE THIRD PARTY AND INHOUSE VENDORS THIS PART WILL GO AWAY ***

wdstat   *=*+1          ; command/status reg
wdtrk    *=*+1          ; track reg
wdsec    *=*+1          ; sector reg
wddat    *=*+1          ; data reg

;*******************************************************************

*=$4000          
; 6526a serial chip (about it)... shift registers in the 6522 suck...
	
; ******* BEWARE THIRD PARTY AND INHOUSE VENDORS THIS PART WILL GO AWAY ***

	*=*+1          	; unused port a
	*=*+1		; unused port b
	*=*+1		; unused dd port a
	*=*+1		; unused dd port b
tima_l	*=*+1		; timer a used for the baud rate generator
tima_h	*=*+1		; *
	*=*+1		; unused timb_l
	*=*+1		; unused timb_h
	*=*+4		; unused tod
sdr	*=*+1		; serial data register
icr     *=*+1		; interrupt control register
cra	*=*+1		; control register a
	*=*+1		; unused

;*******************************************************************
        .page  

;permanent address variables

*=zp2            

vnmi     *=*+2          ; indirect for nmi

cmd_trk			; **** 1571 ****
nmiflg   *=*+1   
autofg   *=*+1   
secinc   *=*+1          ; sector inc for seq
revcnt   *=*+1          ; error recovery count

bufs     =$300        	; start of data bufs
fbufs    =bufs        	; format download image
        
;*
;*********************************
;*
;*      zero page variables
;*
;*********************************
;*
usrjmp   *=*+2          ;  user jmp table ptr
bmpnt    *=*+2          ;  bit map pointer
temp     *=*+6          ;  temp work space
ip       *=*+2          ;  indirect ptr variable
lsnadr   *=*+1          ;  listen address
tlkadr   *=*+1          ;  talker address
lsnact   *=*+1          ;  active listener flag
tlkact   *=*+1          ;  active talker flag 
adrsed   *=*+1          ;  addressed flag
atnpnd   *=*+1          ;  attention pending flag
atnmod   *=*+1          ;  in atn mode
prgtrk   *=*+1          ;  last prog accessed
drvnum   *=*+1          ;  current drive #
track    *=*+1          ;  current track
sector   *=*+1          ;  current sector
lindx    *=*+1          ;  logical index
sa       *=*+1          ;  secondary address
orgsa    *=*+1          ;  original sa
data     *=*+1          ;  temp data byte

t0       =temp   
t1       =temp+1         
t2       =temp+2         
t3       =temp+3         
t4       =temp+4         
r0       *=*+1   
r1       *=*+1   
r2       *=*+1   
r3       *=*+1   
r4       *=*+1   
result   *=*+4   
accum    *=*+5   
dirbuf   *=*+2   

cmd_sec			;  **** 1571 ****
icmd     *=*+1          ;  ieee cmd in

cpmsek			;  **** 1571 ****
mypa     *=*+1          ;  my pa flag
cont     *=*+1          ;  bit counter for ser
;*
;*********************
;*
;*  zero page array
;*
;***********************
;*
buftab   *=*+cbptr+4    ;  buffer byte pointers
cb=buftab+cbptr          
buf0     *=*+mxchns+1    
buf1     *=*+mxchns+1    
nbkl             
recl     *=*+mxchns      
nbkh             
rech     *=*+mxchns      
nr       *=*+mxchns      
rs       *=*+mxchns      
ss       *=*+mxchns      
f1ptr    *=*+1          ;  file stream 1 pointer

recptr   *=*+1   
ssnum    *=*+1   
ssind    *=*+1   
relptr   *=*+1   
entsec   *=*+mxfils     ;  sector of directory entry
entind   *=*+mxfils     ;  index of directory entry
fildrv   *=*+mxfils     ;  default flag, drive #
pattyp   *=*+mxfils     ;  pattern,replace,closed-flags,type
filtyp   *=*+mxchns     ;  channel file type
chnrdy   *=*+mxchns     ;  channel status
eoiflg   *=*+1          ;  temp eoi
jobnum   *=*+1          ;  current job #
lrutbl   *=*+mxchns-1   ;  least recently used table
nodrv    *=*+2          ;  no drive flag

dskver   *=*+2          ;  disk version from 18.0
zpend=*          
			;  stack area

	 *=$0103+$46	;  ****** STACK ******

bam_one	 *=*+105	;  **** 1571 vars ****
dside    *=*+1		;  side flag
mfmcmd   *=*+1		;  mfm controller command
side	 *=*+1		;  side flag
fmtsid	 *=*+1
vertog	 *=*+1		;  verify?
	 *=$01bb	;  end of vars start overflow buffer

*=$200           
cmdbuf   *=*+cmdlen+1    
cmdnum   *=*+1          ;  command #
lintab   *=*+maxsa+1    ;  sa:lindx table
chndat   *=*+mxchns     ;  channel data byte
lstchr   *=*+mxchns     ;  channel last char ptr
type     *=*+1          ;  active file type
strsiz   *=*+1   
tempsa   *=*+1          ;  temporary sa
cmd      *=*+1          ;  temp job command

lstsec   *=*+1          ;  
bufuse   *=*+2          ;  buffer allocation
mdirty   *=*+2          ;  bam 0 & 1 dirty flags

entfnd   *=*+1          ;  dir-entry found flag
dirlst   *=*+1          ;  dir listing flag
cmdwat   *=*+1          ;  command waiting flag
linuse   *=*+1          ;  lindx use word
lbused   *=*+1          ;  last buffer used
rec      *=*+1   
trkss    *=*+1   
secss    *=*+1   
        .page    
;*
;********************************
;*
;*  ram array area
;*
;********************************
;*
lstjob   *=*+bfcnt      ;  last job
dsec     *=*+mxchns     ;  sector of directory entry
dind     *=*+mxchns     ;  index of directory entry
erword   *=*+1          ;  error word for recovery
erled    *=*+1          ;  error led mask for flashing
prgdrv   *=*+1          ;  last program drive
prgsec   *=*+1          ;  last program sector
wlindx   *=*+1          ;  write lindx

mfmsiz_lo		;  **** 1571 ****
rlindx   *=*+1          ;  read lindx
nbtemp   *=*+2          ;  # blocks temp

cmdsiz   *=*+1          ;  command string size
char     *=*+1          ;  char under parser
limit    *=*+1          ;  ptr limit in compar
f1cnt    *=*+1          ;  file stream 1 count
f2cnt    *=*+1          ;  file stream 2 count
f2ptr    *=*+1          ;  file stream 2 pointer

;  parser tables
filtbl   *=*+mxfils+1   ;  filename pointer
filtrk   *=*+mxfils     ;  1st link/track
filsec   *=*+mxfils     ;          /sector

;  channel tables

patflg   *=*+1          ;  pattern presence flag
image    *=*+1          ;  file stream image
drvcnt   *=*+1          ;  number of drv searches
drvflg   *=*+1          ;  drive search flag
lstdrv   *=*+1          ;  last drive w/o error
found    *=*+1          ;  found flag in dir searches
dirsec   *=*+1          ;  directory sector
delsec   *=*+1          ;  sector of 1st avail entry
delind   *=*+1          ;  index  "
lstbuf   *=*+1          ;  =0 if last block
index    *=*+1          ;  current index in buffer
filcnt   *=*+1          ;  counter, file entries
typflg   *=*+1          ;  match by type flag
mode     *=*+1          ;  active file mode (r,w)
jobrtn   *=*+1          ;  job return flag
eptr     *=*+1          ;  ptr for recovery
toff     *=*+1          ;  total track offset
ubam     *=*+2          ;  last bam update ptr
tbam     *=*+4          ;  track # of bam image

;<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>

bam      *=*+16		;  bam images
	 *=*-8		;  adjust address
irqjmp   *=*+2		;  indirect irq vector
mtrcnt	 *=*+1		;  motor auto on var
	 *=*+1	;maxtrk	;  single sided=>36, double sided=>71
savbm	 *=*+2
lock	 *=*+1		;  mode lock
channel  *=*+1		;  channel for fstload

;<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>

;*
;*****************************************
;*
;*   output buffers
;*
;********************************************
;*
nambuf   *=*+36         ;  directory buffer
errbuf   *=*+36         ;  error msg buffer
wbam     *=*+1          ;  don't-write-bam flag
ndbl     *=*+2          ;  # of disk blocks free
ndbh     *=*+2
phase    *=*+2

ramend=*         
