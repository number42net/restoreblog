.PAG 'MATH3'
LOG	JSR SIGN
	BEQ LOGERR
	BPL LOG1
LOGERR	JMP FCERR
;
LOG1	LDA FACEXP
	SBC #$7F
	PHA
	LDA #$80
	STA FACEXP
	LDA #<SQR05
	LDY #>SQR05
	JSR FADD
	LDA #<SQR20
	LDY #>SQR20
	JSR FDIV
	LDA #<FONE
	LDY #>FONE
	JSR FSUB
	LDA #<LOGCN2
	LDY #>LOGCN2
	JSR POLYX
	LDA #<NEGHLF
	LDY #>NEGHLF
	JSR FADD
	PLA
	JSR FINLOG
	LDA #<LOG2
	LDY #>LOG2
FMULT	JSR CONUPK
FMULTT
	BEQ MULTRT
;
	JSR MULDIV
	LDA #0
	STA RESHO
	STA RESMOH
	STA RESMO
	STA RESLO
	LDA FACOV
	JSR MLTPLY
	LDA FACLO
	JSR MLTPLY
	LDA FACMO
	JSR MLTPLY
	LDA FACMOH
	JSR MLTPLY
	LDA FACHO
	JSR MLTPL1
	JMP MOVFR
;
MLTPLY	BNE MLTPL1
	JMP MULSHF
;
MLTPL1	LSR A
	ORA #$80
MLTPL2	TAY
	BCC MLTPL3
	CLC
	LDX #3
MLTPL4
	LDA RESHO,X
	ADC ARGHO,X
	STA RESHO,X
	DEX
	BPL MLTPL4
MLTPL3	ROR RESHO
	ROR RESMOH
	ROR RESMO
	ROR RESLO
	ROR FACOV
	TYA
	LSR A
	BNE MLTPL2
MULTRT	RTS
.SKIP 2
;    MOVE, TYPICALLY A BASIC ROM CONSTANT, INTO FAC
;    ENTER: .A,.Y  POINTER TO VALUE
;           .X     BANK# (UCNUPK)
;
CONUPK	LDX #SYSBNK
UCNUPK	STX I6509
	STA INDEX1
	STY INDEX1+1
	LDY #4
	LDA (INDEX1)Y
	STA ARGLO
	DEY
	LDA (INDEX1)Y
	STA ARGMO
	DEY
	LDA (INDEX1)Y
	STA ARGMOH
	DEY
	LDA (INDEX1)Y
	STA ARGSGN
	EOR FACSGN
	STA ARISGN
	LDA ARGSGN
	ORA #$80
	STA ARGHO
	DEY
	LDA (INDEX1)Y
	JSR MAPTXT 
	STA ARGEXP
	LDA FACEXP
	RTS
.SKIP 3
MULDIV	LDA ARGEXP
MLDEXP	BEQ ZEREMV
	CLC
	ADC FACEXP
	BCC TRYOFF
	BMI GOOVER
	CLC
	.BYTE $2C
TRYOFF	BPL ZEREMV
	ADC #$80
	STA FACEXP
	BNE *+5
	JMP ZEROML
;
	LDA ARISGN
	STA FACSGN
	RTS
MLDVEX	LDA FACSGN
	EOR #$FF
	BMI GOOVER
ZEREMV	PLA
	PLA
	JMP ZEROFC
;
GOOVER	JMP OVERR
;
MUL10	JSR MOVAF
	TAX
	BEQ MUL10R
	CLC
	ADC #2
	BCS GOOVER
FINML6	LDX #0
	STX ARISGN
	JSR FADDC
	INC FACEXP
	BEQ GOOVER
MUL10R	RTS
TENC	.BYTE $84,$20,0,0,0
DIV10	JSR MOVAF
	LDA #<TENC
	LDY #>TENC
	LDX #0
FDIVF	STX ARISGN
	JSR MOVFM
	JMP FDIVT
;
FDIV	JSR CONUPK
FDIVT	BEQ DV0ERR
	JSR ROUND
	LDA #0
	SEC
	SBC FACEXP
	STA FACEXP
	JSR MULDIV
	INC FACEXP
	BEQ GOOVER
	LDX #$FC
	LDA #1
DIVIDE	LDY ARGHO
	CPY FACHO
	BNE SAVQUO
	LDY ARGMOH
	CPY FACMOH
	BNE SAVQUO
	LDY ARGMO
	CPY FACMO
	BNE SAVQUO
	LDY ARGLO
	CPY FACLO
SAVQUO	PHP
	ROL A
	BCC QSHFT
	INX
	STA RESLO,X
	BEQ LD100
	BPL DIVNRM
	LDA #1
QSHFT	PLP
	BCS DIVSUB
SHFARG	ASL ARGLO
	ROL ARGMO
	ROL ARGMOH
	ROL ARGHO
	BCS SAVQUO
	BMI DIVIDE
	BPL SAVQUO
DIVSUB	TAY
	TXA
	PHA
	LDX #3
DIVSB1
	LDA ARGHO,X
	SBC FACHO,X
	STA ARGHO,X
	DEX
	BPL DIVSB1
	PLA
	TAX
	TYA
	JMP SHFARG
;
DV0ERR	LDX #ERRDVO
	JMP ERROR
;
LD100	LDA #$40
	BNE QSHFT
DIVNRM	ASL A
	ASL A
	ASL A
	ASL A
	ASL A
	ASL A
	STA FACOV
	PLP
; JMP MOVFR
.PAG
;    FLOATING PT MOVE ROUTINES
;
;    MOVE DATA BETWEEN MEMORY AND FLOAT "REGS". LETTERS
;    FOLLOWING "MOV" IN EACH ROUTINE NAME TELLS WHAT THAT
;    ROUTINE ACCOMPLISHES: DESTINATION, SOURCE
;
.SKIP 3
;     FAC <- RES
MOVFR
	LDX #3
MOVFRZ
	LDA RESHO,X
	STA FACHO,X
	DEX
	BPL MOVFRZ
	JMP NORMAL
;
;    MOVFM:   FAC <- SYSTEM MEMORY
;    MOVFUM:  FAC <- USER MEMORY
;
MOVFM	LDX #SYSBNK
MOVFUM	STA INDEX1
	STY INDEX1+1
	STX I6509
	LDY #3+ADDPRC
	LDA (INDEX1)Y
	STA FACLO
	DEY
	LDA (INDEX1)Y
	STA FACMO
	DEY
	LDA (INDEX1)Y
	STA FACMOH
	DEY
	LDA (INDEX1)Y
	STA FACSGN
	ORA #$80
	STA FACHO
	DEY
	LDA (INDEX1)Y
	STA FACEXP
	STY FACOV
	JMP MAPTXT 
;
;    MOV2F:  TEMP2F <- FAC
;    MOV1F:  TEMP1F <- FAC
;    MOVMF:  SYSTEM MEMORY <- FAC
;    MOVVF:  FORPNT VAR  <- FAC
;    MOVUMF: USER MEMORY <- FAC
;
MOV2F	LDX #TEMPF2
	.BYTE $2C
MOV1F	LDX #TEMPF1
	LDY #0
MOVMF	JSR ROUND
	LDA #SYSBNK
	BPL MOV001      ;ALWAYS
.SKIP 2
MOVVF	LDX FORPNT
	LDY FORPNT+1
	LDA FORPNT+2
MOVUMF
	PHA
	JSR ROUND
	PLA
MOV001	STA I6509
	STY INDEX1+1
	STX INDEX1
	LDY #3+ADDPRC
	LDA FACLO
	STA (INDEX)Y
	DEY
	LDA FACMO
	STA (INDEX)Y
	DEY
	LDA FACMOH
	STA (INDEX)Y
	DEY
	LDA FACSGN
	ORA #$7F
	AND FACHO
	STA (INDEX)Y
	DEY
	LDA FACEXP
	STA (INDEX)Y
	STY FACOV
	JMP MAPTXT 
;
;    MOVFA:  FAC <- ARG REGISTER
;    MOVAF:  ARG <- FAC REGISTER
;
MOVFA	LDA ARGSGN
MOVFA1	STA FACSGN
	LDX #4+ADDPRC
MOVFAL	LDA ARGEXP-1,X
	STA FACEXP-1,X
	DEX
	BNE MOVFAL
	STX FACOV
	RTS
;
MOVAF	JSR ROUND
MOVEF	LDX #5+ADDPRC
MOVAFL	LDA FACEXP-1,X
	STA ARGEXP-1,X
	DEX
	BNE MOVAFL
	STX FACOV
MOVRTS	RTS
.SKIP 4
ROUND	LDA FACEXP
	BEQ MOVRTS
	ASL FACOV
	BCC MOVRTS
INCRND	JSR INCFAC
	BNE MOVRTS
	JMP RNDSHF
SIGN	LDA FACEXP
	BEQ SIGNRT
FCSIGN	LDA FACSGN
FCOMPS	ROL A
	LDA #$FF
	BCS SIGNRT
	LDA #1
SIGNRT	RTS
;
SGN	JSR SIGN
FLOAT	STA FACHO
	LDA #0
	STA FACHO+1
	LDX #$88
FLOATS	LDA FACHO
	EOR #$FF
	ROL A
FLOATC	LDA #0
	STA FACLO
	STA FACMO
FLOATB	STX FACEXP
	STA FACOV
	STA FACSGN
	JMP FADFLT
;
ABS	LSR FACSGN
	RTS
;
;    COMPARE FAC WITH VALUE STORED IN SYSTEM MEMORY
;    ENTER: .A,.Y POINTER TO VALUE
;
FCOMP	STA INDEX2
FCOMPN	STY INDEX2+1    ; ENTER W/VALUE ON STACK ("NEXT")
	LDY #0
	JSR FCINX2 
	INY
	TAX
	BEQ SIGN
	JSR FCINX2 
	EOR FACSGN
	BMI FCSIGN
	CPX FACEXP
	BNE FCOMPC
	JSR FCINX2 
	ORA #$80
	CMP FACHO
	BNE FCOMPC
	INY
	JSR FCINX2 
	CMP FACMOH
	BNE FCOMPC
	INY
	JSR FCINX2 
	CMP FACMO
	BNE FCOMPC
	INY
	LDA #$7F
	CMP FACOV
	JSR FCINX2 
	SBC FACLO
	BEQ QINTRT
FCOMPC	LDA FACSGN
	BCC FCOMPD
	EOR #$FF
FCOMPD	JMP FCOMPS
.SKIP 2
FCINX2	JSR MAPSYS 
	LDA (INDEX2)Y
	JMP MAPTXT 
.END
