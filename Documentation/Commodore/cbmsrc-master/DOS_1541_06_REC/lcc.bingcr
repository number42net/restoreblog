.PAGE 'LCC.BINGCR - FAST'
;   FAST BINARY TO GCR
;
;
PUT4BG	LDA #0          ; CLEAR TABLE
	STA GTAB+1
	STA GTAB+4
;
	LDY GCRPNT
;
	LDA BTAB
	AND #$F0
	LSR A
	LSR A
	LSR A
	LSR A
	TAX
	LDA BGTAB,X
;
	ASL A
	ASL A
	ASL A
	STA GTAB
;
	LDA BTAB
	AND #$0F
	TAX
	LDA BGTAB,X
;
	ROR A
	ROR GTAB+1
	ROR A
	ROR GTAB+1
;
	AND #$07
	ORA GTAB
	STA (BUFPNT),Y
;
	INY
;
	LDA BTAB+1
	AND #$F0
	LSR A
	LSR A
	LSR A
	LSR A
	TAX
	LDA BGTAB,X
;
	ASL A
	ORA GTAB+1
	STA GTAB+1
;
;
	LDA BTAB+1
	AND #$0F
	TAX
	LDA BGTAB,X
;
	ROL A
	ROL A
	ROL A
	ROL A
	STA GTAB+2
;
	ROL A
	AND #1
	ORA GTAB+1
	STA (BUFPNT),Y
;
	INY
;
	LDA BTAB+2
	AND #$F0
	LSR A
	LSR A
	LSR A
	LSR A
	TAX
	LDA BGTAB,X
;
	CLC
	ROR A
	ORA GTAB+2
	STA (BUFPNT),Y
	INY
;
	ROR A
	AND #$80
	STA GTAB+3
;
	LDA BTAB+2
	AND #$0F
	TAX
	LDA BGTAB,X
	ASL A
	ASL A
	AND #$7C
	ORA GTAB+3
	STA GTAB+3
;
	LDA BTAB+3
	AND #$F0
	LSR A
	LSR A
	LSR A
	LSR A
	TAX
	LDA BGTAB,X
;
	ROR A
	ROR GTAB+4
	ROR A
	ROR GTAB+4
	ROR A
	ROR GTAB+4
;
	AND #$03
	ORA GTAB+3
	STA (BUFPNT),Y
	INY
	BNE BING35
;
	LDA SAVPNT+1
	STA BUFPNT+1
;
;
BING35	LDA BTAB+3
	AND #$0F
	TAX
	LDA BGTAB,X
	ORA GTAB+4
	STA (BUFPNT),Y
	INY
	STY GCRPNT
	RTS
;
;
;
BGTAB	.BYTE $0A
	.BYTE $0B
	.BYTE $12
	.BYTE $13
	.BYTE $0E
	.BYTE $0F
	.BYTE $16
	.BYTE $17
	.BYTE $09
	.BYTE $19
	.BYTE $1A
	.BYTE $1B
	.BYTE $0D
	.BYTE $1D
	.BYTE $1E
	.BYTE $15
;
;
;
;******************************
;*
;*
;*       BINARY TO GCR CONVERSION
;*
;*
;*   DOES INPLACE CONVERSION OF
;*   BUFFER TO GCR USING OVERFLOW
;*   BLOCK
;*
;*
;*   CREATES WRITE IMAGE
;*
;*     1 BLOCK ID CHAR
;*   256 DATA BYTES
;*     1 CHECK SUM
;*     2 OFF BYTES
;*   ---
;*   260 BINARY BYTES
;*
;*  260 BINARY BYTES >> 325 GCR
;*
;*  325 = 256 + 69 OVERFLOW
;*
;*
;********************************
;*
BINGCR	LDA #0          ; INIT POINTERS
	STA BUFPNT
	STA SAVPNT
	STA BYTCNT
;
	LDA #256-TOPWRT
	STA GCRPNT      ; START SAVING GCR HERE
;
	STA GCRFLG      ; BUFFER CONVERTED FLAG
;
	LDA BUFPNT+1    ; SAVE BUFFER POINTER
	STA SAVPNT+1
;
	LDA #>OVRBUF    ; POINT AT OVERFLOW
	STA BUFPNT+1
;
	LDA DBID        ; STORE DATA BLOCK ID
	STA BTAB        ; AND NEXT 3 DATA BYTES
;
	LDY BYTCNT
;
	LDA (SAVPNT),Y
	STA BTAB+1
	INY
;
	LDA (SAVPNT),Y
	STA BTAB+2
	INY
;
	LDA (SAVPNT),Y
	STA BTAB+3
	INY
;
BING07	STY BYTCNT      ; NEXT BYTE TO GET
;
	JSR PUT4BG      ; CONVERT AND STORE
;
	LDY BYTCNT
;
	LDA (SAVPNT),Y
	STA BTAB
	INY
	BEQ BING20
;
	LDA (SAVPNT),Y
	STA BTAB+1
	INY
;
	LDA (SAVPNT),Y
	STA BTAB+2
	INY
;
	LDA (SAVPNT),Y
	STA BTAB+3
	INY
;
	BNE BING07      ; JMP
;
;
BING20	LDA CHKSUM      ; STORE CHKSUM
	STA BTAB+1
;
	LDA #0          ; STORE 0 OFF BYTE
	STA BTAB+2
	STA BTAB+3
;
	JMP PUT4BG      ; CONVERT AND STORE AND RETURN
;
;
;
.END
