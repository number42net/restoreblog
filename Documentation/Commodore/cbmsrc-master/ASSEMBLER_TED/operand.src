	.page
	.subttl  operand

; operand processing *****
; processes normal operands & determines if they are valid.

h201	ldy #0
	sty joptyp	;operand type
	sty joplen	;bytes to generate
	sty jnopv	;operand value flag

; check for implied operand

	lda joptem	;opcode template
	cmp #20		;implied operand
	bne h17		;skip to next sect

; generate opcode for implied and accumulator modes

h459	ldy #0		;insert in op posit
	lda jopbas	;op is base opcode
	jsr objout	;put in memory map

	ldx #0		;get error col
	ldy #1		;num of bytes
	txa
	jmp lts1

; need operand - check branch first

h17	cmp #21		;branch template
	bne h9960	;no
	lda #14
	sta joptem
	lda #7		;error code
	sta ierr
h9960	lda icse	;pntr to last char
	sta icolp
	inc icolp	;next char
	jsr nfndnb	;find start of opernd
	bcs h9917
	lda #$18
	sta ierr
	jmp h99		;error--no operand

; process operand field

h9917	lda icrd,x	;first char
	cmp #';'	;see if comment field
	bne h9934
	lda #$18
	sta ierr
	jmp h900	;error-no operand

; an operand-check .a mode first

h9934	cmp #'A'
	bne h39		;not accumulator mode
	cpx imaxcl	;see if off end
	beq h9965
	ldy icrd+1,x	;after the 'A'
	cpy #' '	;must be blank
	bne h39		;not .a mode

h9965	ldy joptem	;.a mode - process
	lda kltbl-1,y
	bmi h458	;.a mode not valid
	clc
	adc jopbas	;compute real opcode
	sta jopbas
	jmp h459	;done with this opcode

; .a mode not allowed- error

h458	ldx icsb	;error column
	ldy #3		;number of bytes to save
	lda #5		;error code
	jmp lts1

h39	cmp #'#'	;check for immediate mode
	bne h24		;not immediate

	lda #10		;opcode type
	jmp h831

h24	cmp #'('	;check for indirect mode
	bne h23		;not indirect

	lda #5		;set optype

; done checking obvious addr modes. get ready to evaluate operand.

h831	sta joptyp
	inx
	inc icsb
	cpx imaxcl	;ran off end card?
	beq h23		;no
	bcc h23
	jmp h99		;ran off end

h23	jsr eval	;eval the operand
	stx jercol	;error col from eval
	lda #$13	;bad expression
	sta ierr	;preload for later
	dec return	;0,1 or 2 from eval
	bmi h20		;good return      (0)
	beq h202	;undefined symbol (1)
			;uninterp expr	  (2) 

	lda joptyp	;might be single ascii in #
	cmp #10		;see if # mode
	beq h9935	;yes
	jmp h995	;no--(bad expression)

; immidiate ascii operation

h9935	lda icrd,x
	cmp #$27	;appostrophe
	beq h9936	;yes
	cmp #'"'	;double quote ok
	beq h9936
	jmp h980	;error

h9936	txa
	tay
	inx
	cpx imaxcl	;off end of card?
	beq h457	;no
	bcc h457
	jmp h99		;yes--error

h457	lda icrd,x
h9922	sta iexp+1	;val of char
	inx
	cpx imaxcl	;off end of card?
	beq h9923	;no
	bcs h20		;yes-finish process
h9923	lda icrd,x
	cmp #$20	;must be blank
	beq h20	;ok
	cmp #$27	;appostrophe
	beq cse002	;yes--valid operand
	cmp #'"'	;double quote ok
	beq cse002

	tya		;ascii string invalid
	tax
	ldy #3		;number of bytes
	lda ierr	;error code
	jmp lts1

cse002	inx		;ascii char expression
	cpx imaxcl
	beq cse003
	bcs h20
cse003	jsr d71		;eval next
	dec return
	bmi h20		;evaluate ok
	beq h202	;undefd symbol
	jmp h995	;bad expression

	.page
; 1 - operand has no value

h202	inc jnopv	;no operand val
	lda #2		;assumed length
	sta joplen	;operand length

; 0 - good return.  index register check.

h20	jsr nfncmp	;comma or paren
	bcc h500	;no indexing

	lda icrd,x	;get character
	cmp #')'
	bne h51		;no

	inc joptyp	;right paren - add to optype
	inc joptyp
	lda jopbas	;jump instr. test
	cmp #$4c	;jump instr
	beq h140	;yes

; done with paren - next char

	inx		;point to next
	cpx imaxcl	;ran off end
	beq h51		;no
	bcc h51
	jmp h99		;yes - flag as error

h51	lda icrd,x	;check for comma - indexing
	cmp #','
	bne h203	;no - could be y

; has a comma. check for jump again.

	lda jopbas	;base opcode
	cmp #$4c	;a jump
	beq h142	;yes-error-not allowed

; done with comma - look for index.

	inx		;point to next character
	cpx imaxcl	;off end of card?
	beq h203	;no
	bcc h203
	jmp h99		;yes - flag as error

h203	lda icrd,x	;check for index register x
	cmp #'X'
	bne h25		;no

	inc joptyp	;an x-add 1 to optype
	jmp h40

h25	cmp #'Y'	;check for index reg y
	beq h27		;yes

	ldy #3		;invalid index reg - flag
	lda #$12	;error code
	jmp lts1

h27	inc joptyp	;index reg y-add 2 to optype
	inc joptyp
	bne h40

h500	lda jopbas	;if a jump instruction check
	cmp #$4c
	bne h40		;not a jump

; a jump-see if optype is valid
; only 2 type operands allowed: type 0 is abs, 7 is ind

h140	lda joptyp
	beq h145	;type 0...o.k.
	cmp #7
	beq h501	;type 7...o.k.

; invalid oper for jmp - flag

h142	lda #$18	;error code
	sta ierr
	jmp h980	;put in length tab

h501	inx		;good optype- make sure no more
	cpx imaxcl	;off end of card?
	bmi h9924	;no
	bcs h145	;yes
h9924	lda icrd,x
	cmp #' '
	bne h142	;no-bad jump

h145	lda joptyp	;good jump-incr to base opcode
	bne h9925	;optype is a 7
	jmp h9926	;finish jump

h9925	lda #32		;type 7-add to base

; end of jump processing

h9926	ldy #2		;length of operand
	sty joplen
	jmp h46		;finish line process



; operand processed.  see if operand valid for opcode.

h40	lda jnopv	;operand value?
	beq *+5
	jmp h41		;no-assume extended

; have operand value - check rel

	lda joptem	;opcode template
	cmp #14		;relative address
	bne h22		;not relative

	clc		;relative adr- chk validity. adjust expr to get rel adr
	lda ipc
	adc #2
	sta temp+1
	lda ipc+1
	adc #0
	sta temp
	lda iexp+1	;low byte of expr
	sec
	sbc temp+1
	sta iexp+1
	tay		;for later
	lda iexp	;high byte of expr
	sbc temp
	sta iexp

; test expr for branch too far
; if sign bits same then o.k.
; low byte iexp tested.
; branch attempted to go too far

	bpl h9927	;high byte +
	tya		;high byte neg check lo byt
	bmi h28		;both neg-expr ok
	bpl h9929	;differ signs-bad
h9927	tya		;hi byte pos-check lo
	bpl h28		;both pos-expr ok

; bad rel-flag as error

h9929	lda #$17	;branch error
	sta ierr	;save in ierr

h28	lda iexp	;good relative-oplength at 2
	beq h400
	cmp #255
	beq h285
	lda #$17
	sta ierr
h285	lda #0
	sta iexp
	beq h400

; check indirect address error
; error indicated by expr over 254
; or optype >= 6 and <= 9

h22	lda joptyp
	cmp #6
	bcc h400	;no
	cmp #9
	beq h9928	;yes
	bcs h400	;not indirect

h9928	lda iexp	;check val of expr
	bne h9930	;error-over 255
	lda iexp+1
	cmp #255
	bne h400	;no-ok

; error on indirect

h9930	lda #$19	;error code
	sta ierr
	lda #0
	sta iexp

h400	lda #2		;one or two byte operand
	sta joplen
	lda joptyp	;immidiate mode  ?
	cmp #10
	beq cse004	;1 byte operand
	lda iexp
	bne h41		;we need 2 bytes




; 1 byte operand - check if valid

cse004	lda #1
	sta joplen
	lda joptyp
	clc
	adc #2
	sta joptyp
h50	cmp #13		;max addr mode
	bcc h45		;yes...oper valid opcode
	lda #$15	;bad operand-flag
	sta ierr	;page zero invalid
	jmp h900

h41	lda joptyp	;process 2 byte operands
	clc
	adc #13
	sta joptyp
h47	cmp #15		;over 15 could be bad
	beq h45		;good extended operand
	bcs h49		;bad-might be a page 0

; see if operand is valid for opcode.

h45	tay		;first subscript
	dey
	lda kludg,y
	clc
	adc joptem	;second subscript
	tay		;opcode base increment
	lda kltbl,y
	bpl h46		;pos operand type valid

; operand not valid first try. try 2 byte operand.

h49	lda jnopv	;an operand value
	beq h48		;yes

	lda joplen	;no operand val-try 1 byte instr
	cmp #2
	beq h206	;was 2 - try as 1

	lda #$18	;1 byte novalue operand-flg error
	sta ierr	;invalid operand
	jmp h900

h206	lda #1		;abs mode as page zero mode
	sta joplen
	lda joptyp
	sec
	sbc #11
	sta joptyp	;new op type
	jmp h50

h48	lda joplen	;had an operand value
	cmp #1		;1 byte long
	beq h207	;yes...try 2 bytes

	lda #$18	;operand 2 bytes - flag as error
	sta ierr	;invalid operand
	jmp h900

; page 0 mode as abs

h207	inc joplen	;op length to 2
	lda joptyp
	clc
	adc #11
	sta joptyp
	jmp h47

; valid operand - compute opcode and put in memory map

h46	clc
	adc jopbas	;kludge+base opcode
	ldy #0
	jsr objout

; operand value - enter into memory map

	lda jnopv	;operand value flag
	bne h313	;no value

	ldy #1		;an operand value
	lda iexp+1	;low byte of expr
	jsr objout
	ldy #2
	lda joplen
	cmp #1		;if 1 byte then done
	beq h9931	;yes...done
	lda iexp	;2byt=hi-byte to memory
	jsr objout

; any operand errors

h9931	lda ierr	;error code
	cmp #$17	;rel address error?
	beq h900r
	cmp #$19	;ind address error?
	beq h980	;yes

; overflow or negative expr
;
;	lda #9		;mask overflow and sign
;	and iflags+1
;	bne h960	;error exists
;	lda joplen
;	cmp #1
;	bne h9937	;2 bytes ok
;	lda iexp	;see if over 1 byt
;	bne h960	;yes...error
;
;end of processing

h9937	ldx #0		;error column
	ldy joplen
	iny		;count opcode
	txa		;error code
	jmp lts1

h313	ldy joplen	;forward references found
	lda joptem	;operand template
	cmp #14		;branch--3 bytes
	bne h9932	;not branch
	ldy #1		;branch operand length
h9932	ldx icsb	;err col from eval
	iny		;adjust count for opcode
	lda #1
	jmp lts1

; common length table entries
;
; relative branch error #$17

h900r	ldx icsb	;column of target
	ldy #2		;two byte length
	jmp lts1

h99	lda #7		;ran off end of card error
	sta ierr

h900	ldx icsb	;error at start of field
	jmp h9933

h980	ldx icolp	;error at current column
	jmp h9933

h995	ldx jercol	;err at col returned by eval

; enter in length table

h9933	ldy #3		;save 3 bytes
	lda ierr	;error code
	jmp lts1

h960	ldx icsb	;invalid address err - start of field
	ldy joplen
	iny		;count opcode
	lda #4		;get error message
	jmp lts1

; no error - comment or blank card

h990	ldx #0		;no error column
	txa		;no error code
	tay		;no bytes generated



lts1	jsr ltins
endln	ldx #$ff
	txs
	jmp snewln



; find next non-blank.  carry set if non-blank found.

nfndnb	lda imaxcl
	cmp #$ff
	beq j30
	ldx icolp	;column pointer
j10	cpx imaxcl	;end of card
	beq j15		;col. pointer good
	bcs j30		;out of range
j15	lda icrd,x	;next character
	cmp #$20
	beq j20		;yes...a blank
	stx icsb	;restore col. pointer
	bne j40
j20	inx
	stx icolp
	jmp j10



; find end of current string.
; carry set when end is found, carry clear if ran off card.

nfnden	ldy #0
	sty icsl
	ldx icolp	;current column pointer
i10	cpx imaxcl	;in range
	beq i15		;pointer good
	bcs i30		;bad pointer
i15	lda icrd,x	;next character
	cmp #$20	;a blank
	beq i20		;yes, a blank
	cmp #'='
	beq i20		;yes, equals sign
	cmp #';'
	bne i40
i20	cpy #0
	bne i60
i25	dex
	stx icse	;end of string pntr
j40	sec
	rts

i30	cpy #0
	beq i25
j30	clc
	rts

i40	cmp #$27	;appostrophe
	bne i60		;no
	iny
	cpy #2
	bne i60
	ldy #0		;reset temp
i60	inx		;col. pointer
	inc icsl
	jmp i10



; find non-embedded "'" or ")".  carry set if above are found.

nfncmp	ldx icolp	;col. pointer
k40	cpx imaxcl	;out of range?
	beq k45		;yes
	bcs j30		;end of card
k45	lda icrd,x	;next character
	cmp #$27	;beginning of a string? (appostrophe)
	bne k20
k30	inx		;skip over the string
	stx icolp	;new col. pointer
	cpx imaxcl	;off end of card
	beq k35
	bcs j30
k35	lda icrd,x	;new character
	cmp #$27	;closing quote (appostrophe)
	bne k30
	inx		;col. pointer
	stx icolp
	jmp k40

k20	lda icrd,x	;another char
	cmp #$20
	beq j30
	cmp #')'
	beq j40
	cmp #','
	beq j40
	inx
	stx icolp
	jmp k40

;	.end
