.PAGE  'INIT'
;  INITOP - SET VARIABALES BASED UPON TOP OF MEMORY.
;
;      FOR THE 64K CONVERSION, SEVERAL VARIABLES HAVE BEEN
;      ALLOCATED AT THE TOP OF USER MEMORY AND THE TOP OF
;      THE STRING AREA IS SET BELOW THEM. THESE AREAS ARE:
;            INPUT BUFFER
;            DS$ STRING SPACE
;            TEMPORARY DESCRIPTOR STACK
;            RANDOM SEED
;            "ZERO" VALUE
;      FOR ALL OTHER VERSIONS, THE INPUT BUFFER IS ALLO-
;      CATED AT THE TOP OF THE TEXT BANK AND THE OTHER
;      ITEMS ARE PUT AT THE TOP OF THE STRING BANK.
;      NOTE, THE HIGHEST USABLE LOCATION IS ASSUMED TO
;      BE IDENTICAL IN THE TWO SEGMENTS; AFTER ALLOCATION
;      HERE, THE HIGHEST USABLE LOCATION IN TEXT IS POINTED
;      TO BY BUFFPT AND MEMTOP IN THE STRING BANK.
INITOP
	JSR CLALL       ;RESTORE DEFAULT I/O CHANNELS
	SEC
	JSR TOPMEM      ;GET TOP OF RAM
	STX HIGHST      ;SAVE HIGHEST OFFSET
	STY HIGHST+1
;
	SEC
	TXA
	SBC #<BUFSIZ
	STA BUFFPT
	.IFN CC1 <
	TAX
>
	TYA
	SBC #>BUFSIZ
	STA BUFFPT+1
	.IFN CC1 <
	TAY
>
;
	SEC
	TXA
	SBC #40+PTRSIZ  ;40 CHAR DS$ STRING
	STA DSDESC+1
	TAX
	BCS ITP04
	DEY
ITP04	STY DSDESC+2
;
	SEC             ;3 TEMP DESCRIPTORS
	TXA
	SBC #STRSIZ+STRSIZ+STRSIZ
	STA TEMPST
	TAX
	BCS ITP03
	DEY
ITP03	STY TEMPST+1
;
	SEC
	TXA
	SBC #7          ; 5 SEED, 1 COMMA, 1 UNUSED BYTE
	STA SEEDPT
	TAX
	BCS ITP02
	DEY
ITP02	STY SEEDPT+1
;
	SEC
	TXA
	SBC #STRSIZ     ;"ZERO" DESCRIPTOR
	TAX
	BCS ITP06
	DEY
ITP06
;
	STX MEMTOP      ;TOP OF STR BANK
	STY MEMTOP+1
	.IFN CC2+CC3+CC4 <
;
;  STORE A NON-ZERO BYTE PRECEDING INPUT BUFFER FOR INPUT CMD
;
	LDY BUFFPT+1
	LDX BUFFPT
	BNE *+3
	DEY
	DEX
	STX INDEX1
	STY INDEX1+1
	LDA #TKDATA
	LDY #0
	JSR MAPTXT
	STA (INDEX1)Y
>
;
; SET SOME BANKS
	LDA #STRBNK
	STA I6509
	STA MEMTOP+2
	STA DSDESC+3
;
	LDY #6
ITP01	LDA RSEED-1,Y   ;MOVE SEED TO RAM
	STA (SEEDPT)Y
	DEY
	BNE ITP01       ;IF MOVE NOT COMPLETE
;
	TYA             ;ZERO OUT "ZERO", .A<-0
	LDX #STRSIZ
ITP05	STA (MEMTOP)Y
	INY
	DEX
	BNE ITP05
;
	LDA #40         ;DO DS$ LINK BYTES
	TAY
	STA (DSDESC+1)Y ;LENGTH
	INY
	LDA #$FF        ;GARBAGE BYTES
	STA (DSDESC+1)Y
	INY
	STA (DSDESC+1)Y
;
SETTOP	LDA MEMTOP      ;RESET TOP OF STRINGS
	LDY MEMTOP+1
	STA FRETOP
	STY FRETOP+1
	RTS
;
RSEED	.BYT $80,$4F,$C7,$52,$58,','
.PAG
;  THIS INITIALIZES THE BASIC INTERPRETER AND SHOULD
;  BE LOCATED WHERE IT WILL BE WIPED OUT IN RAM IF
;  CODE IS ALL IN RAM.
INIT
	JSR INITV       ;INIT VECTORS
INIT0	;ALWAYS INIT0 AFTER VECTOR INITIALIZATION
	LDX #2          ;INIT USR
INIT05	LDA BJMPS,X
	STA USRPOK,X
	DEX
	BPL INIT05
	STA JMPER       ;ALWAYS A JMP OP
;
;  MOVE SMALL ROUTINES TO PAGE 0
	LDX #INITL      ;LENGTH OF ROUTINE
INIT10	LDA INITAT-1,X
	STA LDAABS-1,X  ;MOVE TO RAM
	DEX
	BNE INIT10      ;IF MOVE NOT COMPLETE
;
	STX BITS        ;CLEAR CELLS
	STX CHANNL
	STX DSDESC
	STX DOLU
	STX TEMPPT
	DEX
	STX LASTPT
	STX LASTPT+1
;
;
;  SET POINTERS TO BOTTOM OF DYNAMIC AREAS.
;  (ONLY FOR AREAS WHICH START IN A NEW BANK.
;  BOTTOM AND TOP LIMITS WILL BE THE SAME IN EACH
;  BANK.)
	.IFN CC4 <
	INX             ;256K VERSION
	STX VARTAB
	LDX #$80        ;FIXED LOWER LIMIT OF $8000
	STX VARTAB+1
>
	SEC             ;GET BOTTOM OF MEMORY
	JSR MEMBOT
	.IFN CC4 <
	STX STREND      ;256K VERSION
	STY STREND+1
>
	.IFN CC3+CC4 <
	STX ARYTAB      ;192K, 256K VERSIONS
	STY ARYTAB+1
>
	.IFN CC2+CC3 <
	STX VARTAB      ;128K, 192K VERSIONS
	STY VARTAB+1
>
	STX TXTTAB      ;SAVE FOR TEXT ENTRY
	STY TXTTAB+1
	JSR INITOP
;
;  SET TEXT POINTER AND OUTPUT SIGNON MESSAGE
;
	JSR MAPTXT
	LDY #0
	TYA
	STA (TXTTAB)Y
	INC TXTTAB
	BNE INIT20
	INC TXTTAB+1
INIT20
	LDX #ASIGON
	JSR MSG         ;OUTPUT CBM SIGN-ON
;
	JSR SCRTCH      ;SET VARIABLES
	LDX #<WARM      ;FIX FOR BOB RUSSELL
	LDY #>WARM
	JSR $FF6F
	CLI
	JMP READY       ;INDICATE READY, AND START
.SKI 4
SIGNON
	.BYT CLRSCR,'*** COMMODORE BASIC '
	.IFN CC1 <
	.BYT '64'
>
	.IFN CC2 <
	.BYT '128'
>
	.IFN CC3 <
	.BYT '256'
>
	.IFN CC4 <
	.BYT '256'
>
	.BYT ', V4.0 ***',CR,CR,0
.SKI 1
BVTRS	.WORD NERROR,NMAIN,NCRNCH,NQPLOP,NGONE
	.WORD NEVAL,NFRMEV,NCHRGO,NCHRGE,FLPINT,GIVAYF
INITV
	LDX #INITV-BVTRS-1 ;INIT VECTORS
INITV5	LDA BVTRS,X
	STA IERROR,X
	DEX
	BPL INITV5
	RTS
.SKIP 3
;  THIS CODE IS MOVED TO PAGE 0 RAM DURING INITIALIZATION.
;  THIS CODE GETS ALTERED (LDAADR, STAADR) THROUGHOUT
;  EXECUTION. IT IS VERY FAST THIS WAY.
;
INITAT
	LDA $FFFF
	RTS
INITL	=*-INITAT       ;LENGTH OF MOVE
.SKI 5
;    WARM ENTRY POINT
;            DO SOME I/O INITIALIZATION
WARM	SEI             ;DISABLE INTERRUPTS
	JSR IOINIT
	JSR CLALL
	JSR CINT        ;SCREEN INIT
	JSR MAPTXT
	CLI             ;ENABLE INTS
	JMP READY
.END
