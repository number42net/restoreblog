.PAGE   'BASIC/DOS INTERFACE VERBS.'
;       THIS SET OF ROUTINES TAKES TOKENS AND VALUES AFTER THE
;       FOLLOWING BASIC KEYWORDS
;
;       DOPEN,  DCLOSE, RECORD, FORMAT, COLLECT, BACKUP, COPY
;       CONCAT, DSAVE,  DLOAD,  CATLOG, RENAME,  APPEND, SCRTCH
;
;       IT THEN PARSES THE FOLLOWING LINE AND FINDS SYNTAX
;       ERRORS, CHECKS FOR OUT OF RANGE VALUES, AND SETS
;       VARIABLES IN THE ZERO-PAGE TO BE PASSED TO THE DISK
;       MESSAGE GENERATOR (DMG).
DCAT	;CATALOG A DEVICE (==DIRECTORY)
	JSR     DOSPAR  ;PARSE THE LINE
	LDA     PARSTS  ;CHECK OPTIONS
	AND     #$E6
	BEQ     *+5
	JMP     SNERR
	LDY     #TCAT   ;TABLE OFFSET
	LDX     #1      ;JUST $
	LDA     PARSTS  ;CHK FOR DEFAULT
	AND     #$11    ;NO DRIVE?
	BEQ     DCAT2
	LSR A
	BCC     DCAT1   ;JUST DRIVE
	INX             ;DRIVE AND FILENAME
	INX
DCAT1	INX
DCAT2	TXA             ;A NOW HAS LENGTH
	JSR     SENDP   ;BUILD
	LDA     #DOSCTL
	STA     XCNT    ;MAX LINES BEFORE PROMPT
	LDY     #$60    ;SA, LOAD FLOPPY
	JSR     OCHANL  ;OPEN SPECIAL CHANNEL
	LDY     #3      ;LOOP COUNTER
;       GET LENGTH IN BLOCKS
DCAT3	STY     T3      ;SAVE COUNTER
	LDX     #DOSLFN
	JSR     CHKIN   ;OPEN FOR INPUT
	JSR     BASIN   ;GET CHAR
	STA     T4
	JSR     READST
	BNE     DCAT10  ;IF BAD STATUS
	JSR     BASIN   ;GET CHAR
	STA     T4+1
	JSR     READST
	BNE     DCAT10  ;IF BAD STATUS
	LDY     T3
	DEY
	BNE     DCAT3   ;IF NOT DONE
;
;       OUTPUT BLOCKS NUMBER
	LDX     T4
	LDA     T4+1
	JSR     LINPRT  ;OUTPUT NUMBER
	LDA     #' '
	JSR     BSOUT   ;OUTPUT A SPACE
;
;       LOOP READING NAME AND OUTPUT
DCAT4	JSR     BASIN   ;GET CHAR
	PHA             ;SAVE CHAR
	JSR     READST  ;GET STATUS
	BNE     DCAT9   ;IF BAD STATUS
	PLA             ;GET BACK CHAR
	BEQ     DCAT5   ;IF EOL
	JSR     BSOUT   ;ECHO CHAR
	JMP     DCAT4   ;CONTINUE TO PROCESS NAME
;
;       HERE ON END OF NAME
DCAT5	DEC     XCNT    ;DECREMENT MAX LINES COUNTER
	LDA     #CR
	JSR     BSOUT   ;OUTPUT NEW LINE
	JSR     CLRCH   ;CLOSE
;
;       CHECK FOR SUSPEND OR HALT
	JSR     KSTOP   ;GET STATUS OF STOP KEY
	BEQ     DCAT10  ;IF STOP REQUEST
	LDA     XCNT    ;LINES
	BNE     DCAT6   ;IF NOT MAX LINES
	LDA     #DOSCTL
	STA     XCNT    ;RESET COUNTER
	LDX     #MREMSG
	JSR     MSG     ;PROMPT USER
	JMP     DCAT7   ;WAIT FOR GO
;
DCAT6	JSR     GETIN   ;GET CHAR FROM KEYBOARD
	BEQ     DCAT8   ;IF NOTHING
	CMP     #' '
	BNE     DCAT8   ;IF NOT SPACE BAR
DCAT7	JSR     GETIN   ;SUSPEND WAITING FOR KEY
	BEQ     DCAT7   ;IF NO KEY - SUSPEND
;
;       PROCESS NEXT
DCAT8	LDY     #2      ;PERFORM 2 TIMES
	BNE     DCAT3   ;JMP
;
DCAT9	PLA             ;CLEAN UP STK
DCAT10	JSR     CLRCH
	LDA     #DOSLFN
	JMP     CLOSE   ;CLOSE SPECIAL CHANNEL
.SKI 3
; OPEN CHANNEL 14 FOR SPECIAL PURPOSES
;        ENTER:  .Y=SA
;                DOSLFN = LU
;                DOSFA = FA
;                ASSUMES SETNAM PREVIOUSLY CALLED
;
OCHANL	LDX DOSFA
	BNE OCHL10
	LDX #8          ;USE DEFAULT OF 8
OCHL10	LDA     #DOSLFN ;LFN
	JSR     SETLFS  ;SET FILE PARAMETERS
	JMP     OPEN    ;OPEN IT...
.PAGE
;       DOPEN CODE DFN(,T(,R))
DOPEN
	LDA     #$22    ;SET ERROR FLAG
	JSR     SAV9
	LDY     #TOPN   ;FCB FORMAT POINTER
	LDX     #4      ;NORMAL LENGTH
	BIT     PARSTS  ;RELATIVE RECORD
	BVC     DOP2    ;IF NOT RANDOM ACCESS
	LDX     #8      ;RANDOM ACCESS LENGTH
	BNE     DOP2    ;ALWAY JUMP
.SKIP 4
;       APPEND CODE
APPEND
	LDA     #$E2    ;SET ERROR FLAGS
	JSR     SAV9    ;CHK REQ'D PARMS
	LDY     #TAPN   ;TABLD INDEX
	LDX     #5      ;LENGTH
;
DOP2
	TXA             ;SET LENGTH INTO A
	JSR     SENDP
	JMP     OPEN
SAV9	JSR     DOSPRS  ;PARSE THE LINE
	JSR     CHK6    ;CHK REQ'D PARMS
	JMP     FNDSCA
.SKIP 4
;       CLOSE DISK FILE
DCLOSE
	LDA     #$F3    ;SET ERROR FLAGS
	JSR     DOSPRS  ;PARSE THE LINE
	JSR     OLDCLR
	LDA     PARSTS  ;ANY LA GIVEN?
	AND     #$04
	BEQ     DCLALL  ;NO....
	LDA     DOSLA
	JMP     CLOSE   ;CLOSE FILE
;
DCLALL
	LDA     DOSFA   ;GET DISK #
	JMP     CLALL   ;CLOSE ALL UNITS
.SKIP 4
;       DSAVE DFN
DSAVE
	LDA     #$66    ;SET ERROR FLAGS
	JSR     DOSPRS  ;PARSE THE LINE
	JSR     SAV20
	JMP     SAVENP
SAV20	JSR     CHK2
	LDY     #TOPN   ;TABLE OFFSET
SAV21	LDA     #4      ;LENGTH
	JMP     SENDP
.SKIP 4
;       DLOAD DFN
DLOAD
	LDA     #$E6    ;SET ERROR FLAGS
	JSR     DOSPRS  ;PARSE THE LINE
	JSR     SAV20
	LDA     #0      ;SET LOAD FLAG
	JSR     LOADNP  ;PERFORM LOAD NO PARSE
	JMP     LOADCK  ;GO TO LOAD CHECKING
.SKIP 4
;       BANK DFN
CHBANK
	JSR     GETBYT
	CPX     #MXBANK ;TOO LARGE?
	BCS     XBKERR
	STX     DFBANK
BSVRTS	RTS
XBKERR	JMP    FCERR    ;ILLEGAL QUANTITY
.SKIP 4
;       BSAVE DFN
BSAVE
	LDA     #$66    ;STD ERROR FLAG
	LDX     #$F8    ;AUXILIARY ERROR FLAG
	JSR     DOSPRX  ;PARSE OPTIONS
	JSR     SAV20;CHECK REQ PARAMS DONE
	.IFN NKRNL <
	LDX     DOSOFL  ;START ADDR
	LDY     DOSOFL+1
	LDA     DOSBNK
	STX     HIGHDS
	STY     HIGHDS+1
	STA     HIGHDS+2
	LDX     DOSOFH  ;END ADDR
	LDY     DOSOFH+1
      JMP     SAVENB
>
.SKIP 4
;       BLOAD DFN
BLOAD
	LDA     #$E6    ;STD ERROR FLAG
	LDX     #$FC    ;AUX ERROR FLAG
	JSR     DOSPRX  ;PARSE OPTIONS
	JSR     SAV20
	.IFN NKRNL <
	LDA     DOSBNK  ;BIT7 IS CLEAR(=>LOAD)
	LDX     DOSOFL  ;START ADDR
	LDY     DOSOFL+1
	JSR     LOAD
	BCC     BSVRTS  ;DONE
	JMP     LDSVER  ;ERROR IN LOAD
>
	.IFE NKRNL <
	RTS
>
.SKIP 4
;       NDDN (,ID)
FORMAT
	JSR     DOSPAR  ;PARSE THE LINE
	JSR     CHK1    ;CHECK PARAMETER ERRORS
	AND     #$11
	CMP     #$11
	BEQ     FRMT2   ;IF REQUIRED PARAMETERS NOT PRESENT
	JMP     SNERR
;
FRMT2	JSR     DCLALL  ;CLOSE ALL FILES
	JSR     RUSURE  ;R-U-SURE PRPT
      BCS     BSVRTS  ;IF NO AND DIRECT MODE
	LDY     #THED   ;TABLD INDEX
	LDA     #4      ;LENGTH
	LDX     DOSDID  ;CHECK FOR DISKID
	BEQ     FRMT6
	LDA     #6      ;LENGTH WITH ID
FRMT6	JSR     TRANS   ;BUILD AND SEND
;
	JSR     ERRCHL  ;GET ERROR STATUS
	JSR     TDM     ;TEST DIRECT MODE
      BNE     BSVRTS  ;IF DIRECT MODE
	JSR     MAPSTR
;
	LDY     #0
	LDA (DSDESC+1)Y
	CMP     #'2'
	BCS     FRMT8   ;IF ERROR OCCURED
      JMP     MAPTXT
;
FRMT8
	LDX     #MSG31  ;? BAD DISK
	JMP     ERROR
.SKIP 4
;       SCRATCH SDFN
SCRATC
	JSR     DOSPAR  ;PARSE THE LINE
	JSR     CHK1
	JSR     RUSURE  ;CHECK DIRECT AND ASK USER
	BCS     ZXIT    ;IF NO AND DIRECT MODE
	LDY     #TSCR   ;OFFSET
	LDA     #4      ;LENGTH
	JSR     TRANS
	JSR     ERRCHL  ;READ ERROR CHANNEL
	JSR     TDM     ;TEST DIRECT MODE
	BNE     ZXIT    ;IF DIRECT MODE
	LDA     #CR
	JSR     BSOUT   ;OUTPUT CR
	JSR     MAPSTR
	LDY     #0      ;CLR TO READ ERRCHL
SCTC1	LDA (DSDESC+1)Y ;GET MESG
	BEQ     SCTC2   ;IF END OF ERROR MESSAGE
	JSR     BSOUT
	INY
	BNE     SCTC1   ;ALWAYS
;
SCTC2	LDA     #CR
	JSR     BSOUT   ;OUTPUT CR
	JSR     MAPTXT
ZXIT	RTS
.SKIP 4
;       RECORD - RANDOM RECORD ACCESS.
RECORD
	LDA     #01     ;DEFAULT POS = 1
	STA     DOSRCL
	JSR     CHRGOT
	LDA     #'#'
	JSR     SYNCHR  ;NEXT CHARACTER = "#"
	JSR     GTVL2   ;GET NEXT VALUE
	CPX     #0
	BEQ     REC4    ;CANNOT BE ZERO
	STX     DOSLA   ;SAVE LOGICAL ADDRESS
	JSR     CHKCOM  ;CHECK FOR ","
	BEQ     REC5    ;IF END OF STATEMENT
	BCC     REC1    ;IF NUMERIC
	JSR     CHKOPN  ;CHECK FOR "("
	JSR     GETPIN  ;GET POSITIVE INTEGER
	JSR     CHKCLS
	JMP     REC2
;
REC1	JSR     GETPIN  ;GET POSITIVE INTEGER
;
REC2	JSR     CHRGOT  ;SEE WHAT IS NEXT
	BEQ     REC3    ;IF END OF STATEMENT
	JSR     CHKCOM  ;CHECK FOR ","
	BEQ     REC5    ;IF END OF STATEMENT
	JSR     GTVL2
	CPX     #0
	BEQ     REC4    ;IF OUT OF RANGE
	CPX     #$FF
	BEQ     REC4    ;IF OUT OF RANGE
	STX     DOSRCL  ;SAVE BYTE POSITION (POS)
	JSR     CHRGOT
	BNE     REC5    ;IF NOT END OF STATEMENT
;
REC3
	LDA     DOSLA   ;GET LOGICAL ADDRESS
	JSR     LKUPLA  ;LOGICAL TO PHYSICAL MAP
	BCS     REC6    ;IF FILE NOT FOUND
	STY     DOSSA   ;SAVE SECONDARY ADDRESS
	JSR     SETLFS  ;SET UP LA, FA
	JSR     OLDCLR  ;CLEAR DISK STATUS
	LDY     #TREC   ;SET POINTER
	LDA     #4      ;PROCESS FIVE BYTES
	BNE     TRANS   ;TRANSFER ON CHANNEL 15
;
REC4	JMP     QTYERR
;
REC5	JMP     SNERR   ;SYNTAX ERROR
;
REC6
	LDX     #MS3    ;FILE NOT FOUND ERR
	JMP     ERROR
.SKIP 4
DCLEAR
	JSR     DOSPAR  ;PARSE THE LINE
	LDY     #TCLR   ;SET CODE
	LDA     #2
	BNE     TRANS
.SKIP 4
;       COLLECT V<DRIVE#>
COLECT
	JSR     DOSPAR  ;PARSE THE LINE
	JSR     CHK3    ;CHK OPT PARMS
	JSR     DCLALL  ;CLOSE ALL FILES
	LDY     #TCOLL  ;TABLD OFFSET
	LDX     #1      ;LENGTH
	LDA     PARSTS
	AND     #$10
	BEQ     CLCT2
	INX             ;INCLUDE DRIVE
CLCT2	TXA             ;PLACE IN A
	BNE     TRANS   ;ALWAYS (X <> 0)
.SKIP 4
;       COPY ROUTINES CDDDFN=SDSFN
DCOPY
	JSR     DOSPAR  ;PARSE THE LINE
	AND     #$30
	CMP     #$30    ;CHK REQ'D PARMS
	BNE     DCPY2
	LDA     PARSTS
	AND     #$C7
	BEQ     DCPY4
DCPY2	LDA     PARSTS
	JSR     CHK4
	LDA     PARSTS
DCPY4	LDY     #TCOPY  ;TABLD OFFSET
	LDA     #8      ;LENGTH
	BNE     TRANS   ;GO DO IT
.SKIP 4
;       CONCAT ROUTINES
CONCAT
	JSR     DOSPAR  ;PARSE THE LINE
	JSR     CHK4
	LDY     #TCONC  ;OFFSET
	LDA     #12     ;LENGTH
	BNE     TRANS   ;GO DO IT
.SKIP 4
;       RENAME RDDDFN=SDSFN
RENAME
	LDA     #$E4    ;SET ERROR FLAGS
	JSR     DOSPRS  ;PARSE THE LINE
	JSR     CHK5
	LDY     #TREN   ;OFFSET
	LDA     #8      ;LENGTH
	BNE     TRANS   ;GO DO IT
.SKIP 4
;       BACKUP D<DD>=<SD>
BACKUP
	LDA     #$C7    ;SET ERROR FLAGS
	JSR     DOSPRS  ;PARSE THE LINE
	AND     #$30    ;REQ'D PARMS
	CMP     #$30
	BEQ     BUP1    ;IF SYNTAX ERROR
	JMP     SNERR   ;SYNTAX ERROR
;
BUP1
	JSR     DCLALL  ;CLOSE DISK
	LDY     #TBAK
	LDA     #4      ;LENGTH
.SKIP 4
;       TRANS SUBROUTINE
TRANS
	JSR     SENDP   ;BUILD STRING TO OUTPUT
	JMP     KTRANS  ;SEND IT...
.END
