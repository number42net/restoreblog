.PAGE   'STRING UTILITY ROUTINES'
;      PUCTRL TAKES ASSIGNS VALUES FOR THE PRINT USING
;      CHARACTERS (FILL,COMMA,DOT,DOLLAR) FROM A USER
;      STRING.
PUCTRL	JSR SAV13
	JSR MAPINX      ;.A=LEN, INDEX=^STRING
	TAY
	BEQ PUCBYE      ;NOTHING,... DONE
	CPY #PUMONY-PUCHRS+1
	BCC PUC50       ;LEN < #PU CHARS
	LDY #PUMONY-PUCHRS+1 ;LEN >= #PU CHARS
PUC50	DEY
PUC60	LDA (INDEX)Y
	STA PUCHRS,Y
	DEY
	BPL PUC60
PUCBYE	JMP MAPTXT
.SKI 5
;       THE STR$ FNC TAKES A NUMBER AND GIVES A STRING
;       WITH THE CHARS THE OUTPUT OF THE # WOULD HAVE
;       GIVEN.
STRD	JSR CHKNUM
	JSR FOUT
	PLA
	PLA
;
;FIND LENGTH OF NUMBER STRING
;
FOUTST	LDY #0
STR010	LDA FBUFFR,Y
	BEQ STR020
	INY
	BNE STR010
;
STR020	TYA             ;LENGTH TO .A
	JSR GETSPA
	STA DSCTMP
	STX DSCTMP+1
	STY DSCTMP+2
	LDY #STRBNK     ;STRING BANK#
	STY DSCTMP+3
	STY I6509
;
;MOVE FROM FBUFFR TO (DSCTMP)
;
	LDY #0
STR030	LDA FBUFFR,Y
	BEQ STR040
	STA (DSCTMP+1)Y
	INY
	BNE STR030
STR040	JSR MAPTXT
	JMP PUTNEW
.SKIP 4
;    GET STRING SPACE FOR THE CREATION OF A STRING
;       AND CREATE A DESCRIPTOR FOR IT IN DSCTMP
;
;   ENTER:  STRINI -  FACMO CONTAINS DESCRIPTOR PTR
;                  -  .A = LENGTH
;           STRSPA -  .A = LENGTH
;
STRINI
	LDX FACMO+2
	STX DSCPNT+2
	LDX FACMO
	LDY FACMO+1
	STX DSCPNT      ; DSCPNT <- DESCRIPTOR PTR
	STY DSCPNT+1
STRSPA	JSR GETSPA      ; ALLOCATE SPACE
	STA DSCTMP      ; LENGTH
	STX DSCTMP+1    ; PTR TO STRING
	STY DSCTMP+2
	LDY #STRBNK     ;STRING BANK#
	STY DSCTMP+3
	RTS
.PAGE
;    GET STRING SPACE FOR THE CREATION OF A STRING.
;     SPACE IS ALLOCATED AND A COPY IS MADE OF THIS
;     SUBSTRING. A TEMPORARY DESCRIPTOR IS MADE.
;  EXIT:   STRNG1 = PTR TO START OF STRING
;          STRNG2 = PTR TO 1ST CHAR PAST TERMINATOR
;          FACMO  = DESCRIPTOR PTR FOR COPY
;
;  STRLIT,STRLT2: A STRING IS SEARCHED UNTIL THE END
;           IS REACHED OR A MATCHING TERMINATING CHAR
;           IS FOUND. THIS SUBSTRING IS COPIED TO A
;           NEW TEMPORARY STRING.
;           ENTER: .A,.Y = PTR TO STRING
;                  .X = STRING BANK#
;
;  PUTNEW: TEMP DESCRIPTOR DSCTMP IS PUT ON THE
;          DESCR "STACK" AND FACMO IS ITS DESC PTR.
;
STRLIT	PHA
	LDA #34         ;SET TERMINATORS
	STA CHARAC
	STA ENDCHR
	PLA
STRLT2	STA STRNG1      ; STRNG1<-PTR TO STRING
	STY STRNG1+1
	STX STRNG1+2
	STX I6509
	STA DSCTMP+1    ; DITTO..
	STY DSCTMP+2
	STX DSCTMP+3
	STX STRNG2+2
	LDY #$FF
STRGET	INY             ; SKIM OVER STRING
	LDA (STRNG1)Y
	BEQ STRFI1
	CMP CHARAC
	BEQ STRFIN
	CMP ENDCHR
	BNE STRGET
STRFIN	CMP #34
	BEQ STRFI2
STRFI1	CLC
STRFI2	JSR MAPTXT
	STY DSCTMP
	TYA
	ADC STRNG1      ; STRNG2 <- PTR TO END OF STRING
	STA STRNG2
	LDX STRNG1+1
	BCC STRST2
	INX
STRST2	STX STRNG2+1
	TYA             ; .A <- LENGTH
	JSR STRINI      ; ALLOCATE SPACE
	LDX STRNG1      ; .X,.Y <- PTR TO STRING(SRC)
	LDY STRNG1+1
	STX INDEX       ;SET UP FOR MOVE
	STY INDEX+1
	LDY STRNG1+2
	STY INDEX+2
	JSR MOVDO       ; COPY IT TO END OF STRING AREA
;
PUTNEW	LDY TEMPPT
	CPY #STRSIZ+STRSIZ+STRSIZ
	BNE PUTNW1
	LDX #ERRST
	JMP ERROR
;      COMPUTE ADDRESS OF THIS TEMP DESCRIPTOR
;      AND TEMPPT BECOMES OFFSET TO NEXT DESCRIPTOR.
;      TWO DESCR POINTERS:
;      FACMO,LASTPT <- TEMPST+TEMPPT
;      AND:
;      TEMPPT <- TEMPPT+STRSIZ
;
PUTNW1
	LDA #STRBNK     ;TEMP STR DESCRS ARE IN STR BANK
	STA I6509
	STA FACMO+2
	LDX #0          ;MOVE LEN,PTR,BANK BYTES
PUTNWL
	LDA DSCTMP,X
	STA (TEMPST)Y   ;LENGTH
	INY
	INX
	CPX #STRSIZ
	BNE PUTNWL
	JSR MAPTXT
	LDA TEMPST+1
	STA FACMO+1
	STA LASTPT+1
	CLC
	LDA TEMPST
	ADC TEMPPT
	STA FACMO
	STA LASTPT
	BCC PUTNW2
	INC FACMO+1
	INC LASTPT+1
PUTNW2
	STY TEMPPT
	LDY #0
	STY FACOV
	DEY
	STY VALTYP      ; $FF IS STRING TYPE
	RTS
.SKIP 3
;
;   MOVE A STRING TO TOP OF FREE SPACE
;   ENTER: MOVINS  - STRNG1 IS SRC DESCRIPTOR PTR
;          MOVDO   - INDEX = PTR TO SRC STRING
;                    .A = LENGTH
;   EXIT: INDEX = PTR TO SOURCE
;         FRESPC = PTR TO DST LINK BYTES
;
MOVINS	LDA STRNG1+2
	STA I6509
	LDY #0
	LDA (STRNG1)Y   ; GET LENGTH,PTR VIA DESCR PTR
	TAX
	INY
	LDA (STRNG1)Y   ;INDEX<-PTR TO STRING
	STA INDEX
	INY
	LDA (STRNG1)Y
	STA INDEX+1
	INY
	LDA (STRNG1)Y
	STA INDEX+2
	TXA
MOVDO	TAY
	BEQ MVDONE
	PHA
	LDX #STRBNK
MOVLP	DEY             ; MOVE THE STRING
	LDA INDEX+2
	STA I6509
	LDA (INDEX)Y
	STX I6509
	STA (FRESPC)Y
	TYA
	BNE MOVLP
	PLA
MVDONE	JSR MAPTXT
	CLC             ; ADJUST FRESPC PTR
	ADC FRESPC
	STA FRESPC
	BCC MVSTRT
	INC FRESPC+1
MVSTRT	RTS
.PAG
;   GIVEN A STRING DESCRIPTOR POINTER, DETERMINE IF IT
;   CAN BE FREED AND DO SO.
;
;   EXIT:  .A = LENGTH
;          INDEX = PTR TO STRING
;
FRESTR	JSR CHKSTR
FREFAC	LDA FACMO       ; DESCPTR PTR
	LDY FACMO+1
	LDX FACMO+2
FRETMP	JSR SAV10
	BNE FRE02       ;ONE THEN SCRATCH IT
	JSR STRADJ      ;INDEX POINTS TO LINK
	BCC FRE02       ;LITERAL NO FIX
	JSR MKGARB      ;MARK IT AS GARBAGE
	PHA             ;SAVE LENGTH ON STACK
;       
	EOR #$FF        ;PUT INDEX BACK
	SEC             ;TO FIRST BYTE
	ADC INDEX
	LDY INDEX+1
	BCS RES00
	DEY
RES00	STA INDEX
	STY INDEX+1
	TAX             ;LO INTO X
	PLA             ;PULL LENGTH FROM STACK
	LDY INDEX+2     ;EQUAL TO FRETOP?
	CPY #STRBNK     ;    BANK
	BNE FRERTS
	LDY INDEX+1
	CPY FRETOP+1    ;   PTR(HI)
	BNE FRERTS
	CPX FRETOP      ;   PTR(LO)
	BNE FRERTS
;       
;       STRING WAS LAST INTO STRING SPACE
;       SAVE GARBAGE COLLECTION SOME TIME
;       BY FREEING UP. (LENGTH + PTRSIZ)
;       
	PHA             ;SAVE LENGTH ON STACK
	CLC
	ADC FRETOP
	BCC FRE01
	INC FRETOP+1
FRE01	CLC
	ADC #PTRSIZ
	STA FRETOP
	BCC FREPLA
	INC FRETOP+1
FREPLA	PLA             ;PULL LENGTH OFF STACK
	RTS
;     INDEX IS DESCRIPTO PTR. SET UP RETURN VALUES
;     AS IF STRING HAD BEEN MARKED AS GARBAGE, AS IN ABOVE.
;
FRE02	JSR MAPINX      ;SET BANK TO INDEX+2
	LDY #$00        ;SET UP .A AND INDEX
	LDA (INDEX)Y    ;LENGTH
	PHA
	INY
	LDA (INDEX)Y    ;POINTER LO
	PHA
	INY
	LDA (INDEX)Y    ;POINTER HI
	TAX
	INY
	LDA (INDEX)Y    ;POINTER BANK
	STA INDEX+2
	STX INDEX+1
	JSR MAPTXT
	PLA
	STA INDEX
	PLA             ;GET BACK LENGTH
	RTS
.SKIP 3
;    IF THE DESCRIPTOR POINTER IS ON THE TOP OF
;    STRING DESCRIPTOR STACK, POP IT OFF.
;    ENTER:  .A,.Y = DESCRIPTOR PTR
;            .X    = BANK#
;
FRETMS
	CPX #STRBNK
	BNE FRERTS
	CPY LASTPT+1
	BNE FRERTS
	CMP LASTPT
	BNE FRERTS
	SBC #STRSIZ
	STA LASTPT
	BCS FRET10
	DEC LASTPT+1
FRET10	SEC
	LDA TEMPPT
	SBC #STRSIZ
	STA TEMPPT
	LDY #0
FRERTS	RTS
.PAGE    'STRING ASSIGNMENT'
.SKIP 1
;    INPCOM PERFORM THE ASSIGNMENT OF A STRING VALUE
;    TO A STRING VARIABLE.
;
;    ENTER: FORPNT = PTR TO LHS VAR'S DATA MEMORY
;           FACMO  = DESCRIPTOR PTR TO RHS STRING VAL
;
;    FORPNT IS CHECKED TO SEE IF IT DS$. SPECIAL CODE
;    HANDLES DS$ ASSIGNMENTS. ALSO, IF THE RHS VALUE IS
;    NOT A TEMPORARY RESULT (I.E., DESCRIPTOR PTR POINTS
;    TO THE SYMBOL TABLES), A COPY OF THE VALUE IS MADE.
;
INPCOM
	LDY FORPNT+2
	CPY #SYSBNK
	BNE GETSPT
	JMP MKTIME      ; SEE PTRGET, => TI$
.SKIP 2
GETSPT
	LDY FACMO+2     ;DESCR PTR FOR TEMP?
	.IFN CC1+CC2+CC3 <
	CPY #VARBNK     ;   NO, IF VARBNK & < STREND
	BNE DNTCPY
	LDY FACMO+1     ;DESCR PTR FOR TEMP?
	CPY STREND+1    ;MAKE A COPY, IF NOT...
	BCC COPY
	BNE DNTCPY
	LDA FACMO
	CMP STREND
	BCC COPY
>
	.IFN CC4 <
	CPY #VARBNK     ;   NO, IF IN VARBNK
	BEQ COPY
>
DNTCPY	LDA FACMO
	LDY FACMO+1
	LDX FACMO+2
	STA DSCPNT
	STY DSCPNT+1
	STX DSCPNT+2
	JSR SAV10
	JSR STRADJ      ;SET UP INDEX TO NEW STRING
	BCC DCOP02
	JSR BCKLNK      ;LINK NEW
DCOP02	JSR FIXOLD      ;FIX OLD...
	LDX FORPNT+2
	LDY #STRSIZ-1
DCOP01	JSR MAPDSP
	LDA (DSCPNT)Y   ;SET THE DESCRIPTOR
	STX I6509
	STA (FORPNT)Y
	DEY
	BPL DCOP01
	JMP MAPTXT
SAV10	STA INDEX
	STY INDEX+1
	STX INDEX+2
	JMP FRETMS
.SKIP 3
;    MAKE A COPY OF THE SOURCE VALUE.
;    DO THE ASSIGNMENT OF THE DUPLICATE.
;
COPY	LDA FACMO+2
	STA I6509
	LDY #0
	LDA (FACMO)Y
	JSR MAPTXT
	JSR STRINI      ;COPY SRC VALUE: MAKE SPACE FOR IT
	LDA DSCPNT      ;DSCPNT,FACMO=DESCR PTR OF SRC
	LDY DSCPNT+1
	LDX DSCPNT+2
	STA STRNG1
	STY STRNG1+1
	STX STRNG1+2
	JSR MOVINS      ;MOVE SRC TO TEMP
; FIX TO FRE GET STRINGS
	LDA STRNG1      ;RESTORE .A & .Y
	LDY STRNG1+1
	LDX STRNG1+2
	JSR FRETMS      ;FRE THE TEMP STRING
;
	JSR STRADD      ;SET UP INDEX
	BCC COPY02      ;?FIX BACK LINKS
	JSR BCKLNK      ;LINK NEW
COPY02	JSR FIXOLD      ; FIX OLD...
	LDY #STRSIZ-1   ;FIX VAR'S DESCRIPTOR
	LDA FORPNT+2
	STA I6509
COPY01	LDA DSCTMP,Y
	STA (FORPNT)Y
	DEY
	BPL COPY01
	JMP MAPTXT
.SKIP 3
;
;      FIX THE NEW STRING BY SETTING ITS BACK LINK
;      BYTES TO POINT TO THE DESTINATION DESCRIPTOR.
;
;      ENTER: FORPNT = DESCR PTR FOR DEST
;
BCKLNK
	JSR MAPINX
	LDY #$00
	LDA FORPNT      ;PUT IN BACKWARDS LINK
	STA (INDEX)Y
	INY
	LDA FORPNT+1
	STA (INDEX)Y
	INY             ;BANK NUMBER
	LDA FORPNT+2
	STA (INDEX)Y
	JMP MAPTXT
.SKIP 3
;    IF THE DESTINATION HAS AN OLD VALUE, FREE IT
;    AND MARK IT AS GARBAGE.
;
;    ENTER:  FORPNT=DEST DESCRIPTOR PTR
;
FIXOLD	LDA FORPNT
	LDY FORPNT+1
	LDX FORPNT+2
	STA INDEX
	STY INDEX+1
	STX INDEX+2
	JSR STRADJ      ;POINT TO OLD STRING
	BCC FNK05       ;IN TEXT DO NOT FIX
	JMP MKGARB      ;MARK AS GARBAGE
.SKIP 3
;      MARK THE STRING AS GARBAGE
;      ENTER:  INDEX POINTS TO STR LINK BYTES
;              .X = LENGTH
;      EXIT:   .X,.A = LENGTH
;              .Y = 0
;              INDEX UNCHANGED
MKGARB
	JSR MAPINX      ;BANK <= INDEX+2
	LDY #2
	LDA #$FF
	STA (INDEX)Y    ;MARK BANK#
	DEY
	STA (INDEX)Y    ;MARK BACK LINK(HI) AS JUNK
	DEY
	TXA
	STA (INDEX)Y    ;BACK LINK(LO)=LEN
	JMP MAPTXT
.SKIP 4
;       TAKES THE POINTER INDEX WHICH POINTS TO A DESCRIPTOR
;       AND INDEXES TO THE DESCIPTORS STRING DATA.
;       IF NO ACTION TO TAKE, (DS$ STRING OR ZERO LENGTH STRING)
;       WE RETURN WITH CARRY CLEAR; OTHERWISE WE RETURN WITH
;       THE POINTER SET TO THE LINK BYTES IN THE STRING
;       THE LENGTH IN .A AND THE CARRY SET.
;
;       STRADJ - USE INDEX AS DESCRIPTOR PTR
;       STRADD - USE DSCTMP AS DESCRIPTOR
;
STRADJ
	JSR MAPINX
	LDY #$00
	LDA (INDEX)Y    ;PUSH LENGTH ON STACK
	PHA
	BEQ SADJ8       ;LENGTH 0 DO NOTHING
	INY
	LDA (INDEX)Y    ;PUSH LO BYTE
	PHA
	INY
	LDA (INDEX)Y    ;HIGH BYTE IN .X
	TAX
	INY
	LDA (INDEX)Y    ;BANK IN .Y
	TAY
	JSR MAPTXT
	PLA             ;LO
SADJ3
	CPY DSDESC+3    ;IS IT DS$ STRING?
	BNE SADJ4
	CPX DSDESC+2
	BNE SADJ4       ;FIX
	CMP DSDESC+1
	BEQ SADJ8
SADJ4	STA INDEX       ;OK, SET POINTER
	STX INDEX+1
	STY INDEX+2
	PLA             ;GET BACK LENGTH
	TAX             ;INTO X ALSO
	JSR SAV15
SADJ6	SEC             ;CARRY SET
FNK05	RTS
;
SADJ8	JSR MAPTXT
	PLA             ;CLEAN UP STACK
	CLC
	RTS
.SKIP 2
STRADD
	LDA DSCTMP
	PHA             ;LENGTH ON STACK
	BEQ SADJ8       ;DO NOTHING
	LDA DSCTMP+1    ;STRING PTR (LO)
	LDX DSCTMP+2    ;STRING PTR (HI)
	LDY DSCTMP+3    ;STRING PTR (BANK)
	JMP SADJ3       ;ETC
.END
